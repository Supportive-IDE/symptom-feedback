(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[931],{4926:function(e,t,s){Promise.resolve().then(s.bind(s,6304))},1670:function(e,t,s){"use strict";var n=s(7437),i=s(7693),r=s.n(i);let o=e=>{let{text:t,prefix:s}=e;return 0===t.length?(0,n.jsx)(n.Fragment,{}):(0,n.jsx)("div",{className:r().output,children:t.map((e,t)=>(0,n.jsxs)("div",{children:[s," ",e]},t))})};t.Z=o},6304:function(e,t,s){"use strict";s.r(t),s.d(t,{default:function(){return sp}});var n=s(7437);let i="miscon",r="lineNumber",o="AssignCompares",a="ColonAssigns",l="CompareMultipleValuesWithOr",c="ComparisonWithBoolLiteral",h="DeferredReturn",d="ForLoopVarIsLocal",u="FunctionCallsNoParentheses",x="IterationRequiresTwoLoops",p="TargetInitialisedOutsideLoop",j="LocalVariablesAreGlobal",g="LoopCounter",f="MapToBooleanWithIf",m="MapToBooleanWithTernaryOperator",y="ParameterMustBeAssignedInFunction",b="ParenthesesOnlyIfArgument",w="PrintSameAsReturn",v="ReturnCall",T="ReturnWaitsForLoop",_="ConditionalIsSequence",F="StringMethodsModifyTheString",C="TypeConversionModifiesArgument",I="TypeMustBeSpecified",k="WhileSameAsIf",N="UnusedReturn",A="bool",E="none",H="unknown data type",S="N/A",R="not parsed",P="invalid",B="undefined",W="variableName",D="IfDefinitionStatement",J="ElifDefinitionStatement",Y="WhileDefinitionStatement",M="AssignmentStatement",O="ChangeStatement";var L=s(6085),q=s(2768),V=s(2618),U=s.n(V),Z=s(2265);function z(e){let{code:t}=e;return(0,Z.useEffect)(()=>{U().highlightAll()},[]),(0,n.jsx)("pre",{children:(0,n.jsx)("code",{className:"language-python",children:"string"==typeof t?t:t.join("\n")})})}function G(e){let{code:t}=e;return(0,Z.useEffect)(()=>{U().highlightAll()},[]),(0,n.jsx)("code",{className:"language-python",children:"string"==typeof t?t:t.join("\n")})}s(4741),s(8544);var Q=s(5281),X=s(7924),K=s(5276),$=s(2040),ee=s(4241),et=s(4462);let es=(e,t,s)=>{let n=X.tk.theme({"&":{backgroundColor:e.background,color:e.foreground},".cm-content":{caretColor:e.caret},".cm-cursor, .cm-dropCursor":{borderLeftColor:e.caret},"&.cm-selectionMatch .cm-snippetField":{backgroundColor:e.selection},"&.cm-focused .cm-selectionBackgroundm .cm-selectionBackground, .cm-content ::selection":{backgroundColor:e.selection},".cm-activeLine":{borderTop:"1px solid "+e.lineHighlight,borderBottom:"1px solid "+e.lineHighlight,background:"transparent"},".cm-gutters":{backgroundColor:e.gutterBackground,color:e.gutterForeground},".cm-activeLineGutter":{borderTop:"1px solid "+e.lineHighlight,borderBottom:"1px solid "+e.lineHighlight,background:"transparent"}},{dark:s}),i=ee.Qf.define(t);return[n,(0,ee.nF)(i)]},en=es({background:"#FFFFFF",foreground:"#4D4D4C",caret:"#AEAFAD",selection:"#D6D6D6",gutterBackground:"#FFFFFF",gutterForeground:"#4D4D4C80",lineHighlight:"#f2f1f1"},[{tag:et.pJ.comment,color:"#8E908C"},{tag:[et.pJ.variableName,et.pJ.self,et.pJ.propertyName,et.pJ.attributeName,et.pJ.regexp],color:"#289dc8"},{tag:[et.pJ.number,et.pJ.bool,et.pJ.null],color:"#F5871F"},{tag:[et.pJ.className,et.pJ.typeName,et.pJ.definition(et.pJ.typeName)],color:"#C99E00"},{tag:[et.pJ.string,et.pJ.special(et.pJ.brace)],color:"#718C00"},{tag:et.pJ.operator,color:"#3E999F"},{tag:[et.pJ.definition(et.pJ.propertyName),et.pJ.function(et.pJ.variableName)],color:"#4271AE"},{tag:et.pJ.keyword,color:"#8959A8"},{tag:et.pJ.derefOperator,color:"#4D4D4C"}],!1),ei=es({background:"#242424",foreground:"#fafafa",caret:"#AEAFAD",selection:"#D6D6D6",gutterBackground:"#242424",gutterForeground:"#a1a1a1",lineHighlight:"#EFEFEF11"},[{tag:et.pJ.comment,color:"#8E908C"},{tag:[et.pJ.variableName,et.pJ.self,et.pJ.propertyName,et.pJ.attributeName,et.pJ.regexp],color:"#42c5f5"},{tag:[et.pJ.number,et.pJ.bool,et.pJ.null],color:"#F5871F"},{tag:[et.pJ.className,et.pJ.typeName,et.pJ.definition(et.pJ.typeName)],color:"#e8b809"},{tag:[et.pJ.string,et.pJ.special(et.pJ.brace)],color:"#71d111"},{tag:et.pJ.operator,color:"#45a9b0"},{tag:[et.pJ.definition(et.pJ.propertyName),et.pJ.function(et.pJ.variableName)],color:"#5d93d9"},{tag:et.pJ.keyword,color:"#b54df7"},{tag:et.pJ.derefOperator,color:"#a1a1a1"}],!0);var er=s(3074),eo=s(845),ea=s.n(eo),el=e=>{let{startingCode:t,setView:s,runCode:i,resetCode:r}=e,o=(0,Z.useRef)(null),a="string"==typeof t?t:t.join("\n"),l=new Q.F6;return(0,Z.useEffect)(()=>{if(null===o.current)return;let e=new X.tk({state:Q.yy.create({doc:a,extensions:[K.Xy,(0,er.Vs)(),X.$f.of([$.wQ,$.oc]),l.of(window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?ei:en)]}),parent:o.current});s(e);let t=t=>{e.dispatch({effects:l.reconfigure(t.matches?ei:en)})};return window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",t),()=>{e.destroy(),s(null)}},[o,t,s,a]),(0,n.jsx)("div",{className:ea().codeEditor,ref:o,children:(0,n.jsxs)("div",{className:ea().buttons,children:[(0,n.jsx)("button",{className:"highlight-btn",id:ea().runButton,onClick:i,children:"Run"}),(0,n.jsx)("button",{id:ea().resetButton,onClick:r,children:"Reset"})]})})},ec=s(5053),eh=s.n(ec),ed=s(1670),eu=s(6682),ex=s.n(eu),ep=s(551),ej=e=>{let{startingCode:t}=e,[s,i]=(0,Z.useState)([]),r=(0,Z.useRef)(null),o=(0,Z.useRef)(t);(0,Z.useEffect)(()=>{},[s]);let a=e=>{i(t=>[...t,e])},l=()=>{null!==r.current&&(i([]),o.current=r.current.state.doc.toString(),eh().configure({output:a,__future__:eh().python3,inputfun:h,inputfunTakesPrompt:!0}),eh().misceval.asyncToPromise(()=>eh().importMainWithBody("<stdin>",!1,o.current,!0)).then(e=>{console.log("success")},e=>{console.log(e),a(e.toString())}))},c=()=>{o.current=t,r.current.state.doc="string"==typeof t?t:t.join("\n"),i([])},h=e=>new Promise(function(t,s){a((0,n.jsx)(ep.Z,{prompt:e,submitHandler:e=>t(e)},Date.now()))});return(0,n.jsxs)("div",{className:ex().miniIDE,children:[(0,n.jsx)(el,{startingCode:o.current,setView:e=>{r.current=e},runCode:l,resetCode:c}),(0,n.jsx)(ed.Z,{text:s,prefix:"%"})]})};let eg=(e,t)=>ef(t,"",e),ef=(e,t,s)=>s.has(e)?s.get(e).replaceAll("%2B","+"):t,em="booleanExpressionText",ey="parentText",eb="parentEntity",ew="otherText",ev="otherEntity",eT="otherType",e_="operator",eF="comparisonText";var eC=new WeakSet;class eI{countVariablesOfType(e){let t=0;for(let s=0;s<Math.min(this.otherEntities.length,this.otherTypes.length);s++)this.otherEntities[s]===W&&e.some(e=>e===this.otherTypes[s])&&t++;return t}countEntities(e){let t=0;for(let s of this.otherEntities)e.some(e=>e===s)&&t++;return t}containsLiteral(){return this.otherEntities.some(e=>e.indexOf("Literal")>=0)}containsVariable(){return this.otherEntities.some(e=>e===W)}isControlFlow(){switch(this.parentEntity){case D:case J:case Y:return!0;default:return!1}}isAssignment(){return this.parentEntity===M||this.parentEntity===O}explainComparison(){if(0===this.comparisonTexts.length)return}constructor(e){(0,q._)(this,eC),this.comparisonBaseList=[],this.valueList=[],this.lineNumber=e.has(r)?Number(e.get(r)):-1,this.booleanExpressionText=eg(e,em),this.parentText=eg(e,ey),this.parentEntity=eg(e,eb),this.otherTexts=e.getAll(ew),this.otherEntities=e.getAll(ev),this.otherTypes=e.getAll(eT),this.operators=e.getAll(e_),this.comparisonTexts=e.getAll(eF),(0,L._)(this,eC,ek).call(this)}}function ek(){for(let e of this.comparisonTexts){let t=e.split(" ");t.length<3?console.log("Expected at least three parts to a comparison and got",t.length,":",e):(this.comparisonBaseList.push(t[0]),this.valueList.push(t[t.length-1]))}for(let e of this.otherTexts)this.valueList.push(e)}function eN(e){let{misconInfo:t}=e,s=new eI(t),i=e=>["a","e","i","o","u"].some(t=>t===e),r=e=>{switch(e){case E:case B:return"has no value";case H:case S:case R:case P:return"may not be boolean";default:return i(e.charAt(0))?"is an ".concat(e):"is a ".concat(e)}};if(""===s.booleanExpressionText||0===s.otherTexts.length||0===s.operators.length)return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{children:"Oops"}),(0,n.jsx)("p",{children:"There is not enough information about the issue to provide feedback."})]});let o=e=>e.indexOf("==")>0||e.indexOf("is")>0&&-1===e.indexOf("is not"),a=e=>e.indexOf("1=")>0||e.indexOf("is not")>0,l=(e,t)=>{for(let s of t){let t=e.indexOf(s);if(t>-1&&t<e.indexOf(" or "))return!0}return!1},c=()=>{if(1===s.comparisonTexts.length){let e="";if(o(s.comparisonTexts[0])?e=" is equal to ":a(s.comparisonTexts[0])&&(e=" is not equal to "),e.length>0)return l(s.booleanExpressionText," is equal to "==e?["=="," is "]:["!="," is not "])?(0,n.jsxs)("h1",{children:["Do you want to check if ",(0,n.jsx)(G,{code:s.comparisonBaseList[0]}),e,s.valueList.map((e,t)=>t<s.valueList.length-1?(0,n.jsxs)(Z.Fragment,{children:[(0,n.jsx)(G,{code:e}),s.valueList.length>1?", ":""]},t):(0,n.jsxs)(Z.Fragment,{children:[s.valueList.length>1?"or ":"",(0,n.jsx)(G,{code:e})]},t)),"?"]}):(0,n.jsxs)("h1",{children:["Do you want to check if something",e,"multiple values?"]})}else if(s.comparisonTexts.length>1){let e="";if(s.comparisonTexts.every(e=>o(e))?e=" are equal to ":s.comparisonTexts.every(e=>a(e))&&(e=" are not equal to "),e.length>0)return(0,n.jsxs)("h1",{children:["Do you want to check if some values",e,"multiple other values?"]})}return(0,n.jsx)("h1",{children:"Do you want to compare something to multiple values?"})},h=()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("p",{children:"Repeat the comparison for each value you want to check. For example, this is wrong:"}),(0,n.jsx)(z,{code:["# This statement will be True no matter the value of x","x == 5 or 6"]}),(0,n.jsx)("p",{children:"...this is right:"}),(0,n.jsx)(z,{code:["# This statement will be True or False, depending on the value of x","x == 5 or x == 6"]})]}),d=()=>{let e=[],t=[];for(let t of s.comparisonTexts)e.push((0,n.jsx)(G,{code:t}));for(let i=0;i<s.otherTypes.length;i++)s.otherTypes[i]===A?e.push((0,n.jsx)(G,{code:s.otherTexts[i]})):t.push((0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(G,{code:s.otherTexts[i]})," ",r(s.otherTypes[i])]}));return e.length>0?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("p",{children:"In your code, these expressions are boolean:"}),(0,n.jsx)("ul",{children:e.map((e,t)=>(0,n.jsx)("li",{children:e},t))}),(0,n.jsx)("p",{children:"But, these expressions are not:"}),(0,n.jsx)("ul",{children:t.map((e,t)=>(0,n.jsx)("li",{children:e},t))})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("p",{children:"In your code, these values are not boolean:"}),(0,n.jsx)("ul",{children:t.map((e,t)=>(0,n.jsx)("li",{children:e},t))})]})};return(0,n.jsxs)(n.Fragment,{children:[c(),(0,n.jsx)("p",{children:"If so, you will need to use different syntax."}),h(),(0,n.jsx)("hr",{}),s.containsLiteral()?(0,n.jsxs)("h2",{children:["Why is ",(0,n.jsx)(G,{code:s.booleanExpressionText})," always ",(0,n.jsx)(G,{code:"True"}),"?"]}):(0,n.jsxs)("h2",{children:["Why might ",(0,n.jsx)(G,{code:s.booleanExpressionText})," always be ",(0,n.jsx)(G,{code:"True"}),"?"]}),(0,n.jsxs)("p",{children:["Python expects the expressions on either side of an ",(0,n.jsx)(G,{code:"or"})," to be ",(0,n.jsx)("strong",{children:"boolean"})," (",(0,n.jsx)(G,{code:"True"})," or ",(0,n.jsx)(G,{code:"False"}),")."]}),d(),(0,n.jsxs)("p",{children:["When Python expects a boolean but finds something else, it uses the value's ",(0,n.jsx)("strong",{children:"truthiness"})," instead. Truthiness is the name given to how Python decides if a value is ",(0,n.jsx)(G,{code:"True"})," or ",(0,n.jsx)(G,{code:"False"})," when it is used where a boolean is expected. ",(0,n.jsx)("em",{children:"All"})," values in Python are either ",(0,n.jsx)("strong",{children:"truthy"})," or ",(0,n.jsx)("strong",{children:"falsy"}),"."]}),(0,n.jsxs)("p",{children:[(0,n.jsx)("strong",{children:"Truthy"})," values become ",(0,n.jsx)(G,{code:"True"})," when used as a boolean. ",(0,n.jsx)("strong",{children:"Falsy"})," values become ",(0,n.jsx)(G,{code:"False"})," when used as a boolean."]}),(0,n.jsxs)("ul",{children:[(0,n.jsxs)("li",{children:["The number 0 is ",(0,n.jsx)("strong",{children:"falsy"})," but all other numbers are ",(0,n.jsx)("strong",{children:"truthy"}),"."]}),(0,n.jsxs)("li",{children:["An empty string is ",(0,n.jsx)("strong",{children:"falsy"})," but all other strings are ",(0,n.jsx)("strong",{children:"truthy"}),"."]}),(0,n.jsxs)("li",{children:["Lists, sets, tuples, and dictionaries ",(0,n.jsx)("strong",{children:"falsy"})," if empty but ",(0,n.jsx)("strong",{children:"truthy"})," if they have items."]}),(0,n.jsxs)("li",{children:[(0,n.jsx)(G,{code:"None"})," is ",(0,n.jsx)("strong",{children:"falsy"}),"."]})]}),s.otherTexts.length>1?(0,n.jsxs)("p",{children:["If any of the values ",s.otherTexts.map((e,t)=>t<s.otherTexts.length-1?(0,n.jsxs)(Z.Fragment,{children:[(0,n.jsx)(G,{code:e}),", "]},t):(0,n.jsxs)(Z.Fragment,{children:["or ",(0,n.jsx)(G,{code:e})]},t))," are ",(0,n.jsx)("strong",{children:"truthy"}),", ",(0,n.jsx)(G,{code:s.booleanExpressionText})," will be ",(0,n.jsx)(G,{code:"True"}),"."]}):1===s.otherTexts.length?(0,n.jsxs)("p",{children:["If ",(0,n.jsx)(G,{code:s.otherTexts[0]})," is ",(0,n.jsx)("strong",{children:"truthy"}),", ",(0,n.jsx)(G,{code:s.booleanExpressionText})," will be ",(0,n.jsx)(G,{code:"True"}),"."]}):(0,n.jsxs)("p",{children:["If any of the non-boolean values in your boolean expression are ",(0,n.jsx)("strong",{children:"truthy"}),", ",(0,n.jsx)(G,{code:s.booleanExpressionText})," will be ",(0,n.jsx)(G,{code:"True"}),"."]}),(0,n.jsx)("h3",{children:"Example"}),(0,n.jsxs)("p",{children:["The if statement below will not work as expected because ",(0,n.jsx)("code",{children:"2"})," is a number, not a boolean expression:"]}),(0,n.jsx)(ej,{startingCode:["# Incorrect"," ","guests = 10","","# incorrect","if guests == 1 or 2:",'    print("We have a room available for this number of guests.")',"else:",'    print("Sorry, we can\'t fit you all in one room!")']}),(0,n.jsxs)("p",{children:[(0,n.jsx)("code",{children:"2"})," is a truthy number so Python will always treat it as ",(0,n.jsx)("code",{children:"True"}),". This means that ",(0,n.jsx)("code",{children:"guests == 1 or 2"})," will be ",(0,n.jsx)("code",{children:"True"})," no matter what the value of ",(0,n.jsx)("code",{children:"guests"})," is."]}),(0,n.jsxs)("p",{children:["Here is the correct code. Both expressions on either side of ",(0,n.jsx)(G,{code:"or"})," are boolean:"]}),(0,n.jsx)(ej,{startingCode:["# Correct"," ","guests = 10","","# correct","if guests == 1 or guests == 2:",'    print("We have a room available for this number of guests.")',"else:",'    print("Sorry, we can\'t fit you all in one room!")']}),(0,n.jsx)("h2",{children:"Experiment"}),(0,n.jsxs)("p",{children:["In the code below, try setting ",(0,n.jsx)(G,{code:"test_var"})," to different values to see if they are truthy or falsy. There are some ideas below the code."]}),(0,n.jsx)(ej,{startingCode:["test_var = 0","if test_var:",'	print(test_var, "is truthy")',"else:",'	print(test_var, "is falsy")']}),(0,n.jsx)("p",{children:"Some values to try:"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:"-5"})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:"13.2"})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:'""'})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:'"Hello"'})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:"[]"})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:'["apples", "oranges", "pears"]'})})]})]})}let eA="fullText",eE="statementLine",eH=e=>{let t=0;for(let s=0;s<e.length;s++)if(" "===e.charAt(s))t++;else break;return t},eS=e=>{let t=e.split("\n"),s=Math.min(...t.slice(1).map(e=>eH(e))),n=t.slice(1).map(e=>e.substring(s));return n.unshift(t[0]),n},eR=(e,t,s)=>{let n="    # code omitted",i=[];for(let r of s){let s=Number(r)-t;i.push(e[s],n)}return i};function eP(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=eR(eS(ef(eA,"",t)),s,t.getAll(eE));return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["Sequence of ",(0,n.jsx)(G,{code:"if"})," statements"]}),(0,n.jsxs)("p",{children:["There is a sequence of similar ",(0,n.jsx)(G,{code:"if"})," statements starting on line ",s,":"]}),(0,n.jsx)(z,{code:i}),(0,n.jsxs)("p",{children:["If only one of these statements should run, use ",(0,n.jsx)(G,{code:"elif"})," instead of ",(0,n.jsx)(G,{code:"if"})," for the statements after the first ",(0,n.jsx)(G,{code:"if"}),"."]}),(0,n.jsx)("h2",{children:"Why does it matter?"}),(0,n.jsxs)("p",{children:["The first line of an ",(0,n.jsx)(G,{code:"if"})," is always executed. When only one branch in a sequence should run, use ",(0,n.jsx)(G,{code:"elif"})," instead of ",(0,n.jsx)(G,{code:"if"})," for all branches after the first ",(0,n.jsx)(G,{code:"if"}),". This is more efficient because Python will skip the rest of the branches once a match is found. It will also ensure that only one branch of code can execute if the conditions overlap."]}),(0,n.jsxs)("p",{children:["If it should be possible for more than one branch to run, leave the ",(0,n.jsx)(G,{code:"if"})," statements as they are."]}),(0,n.jsxs)("p",{children:["In the following code, both ",(0,n.jsx)(G,{code:"if"})," statements will execute because both conditions are ",(0,n.jsx)(G,{code:"True"}),"."]}),(0,n.jsx)(ej,{startingCode:["test = 4","if test < 5:",'	print("smaller than 5")',"if test < 10:",'	print("smaller than 10")']}),(0,n.jsxs)("p",{children:["In this revised version, only one branch will execute because the second ",(0,n.jsx)(G,{code:"if"})," has been replaced with ",(0,n.jsx)(G,{code:"elif"}),". Try running this code with different values of ",(0,n.jsx)(G,{code:"test"})," e.g. 4, 7, 10."]}),(0,n.jsx)(ej,{startingCode:["test = 4","if test < 5:",'	print("smaller than 5")',"elif test < 10:",'	print("smaller than 10")']})]})}function eB(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{children:"Unreachable code"}),(0,n.jsxs)("p",{children:["The code beginning on line ",s," will not run because it follows a ",(0,n.jsx)(G,{code:"return"})," statement. The Python interpreter will always exit a function at a ",(0,n.jsx)(G,{code:"return"}),", skipping any code that follows the ",(0,n.jsx)(G,{code:"return"})," in the function. If the code following ",(0,n.jsx)(G,{code:"return"})," is needed, move it before the ",(0,n.jsx)(G,{code:"return"}),". Otherwise, delete it or comment it out."]}),(0,n.jsx)("p",{children:"This issue is sometimes caused by an indentation mistake so check that the unreachable code is in the right place."}),(0,n.jsx)("h2",{children:"An example"}),(0,n.jsx)("p",{children:"Run the code below and notice how the second print statement never executes:"}),(0,n.jsx)(ej,{startingCode:["# Incorrect"," ","def test():",'	print("First print")',"	return 1",'	print("Second print")',"","my_var = test()"]}),(0,n.jsxs)("p",{children:["The second print statement will never be reached because Python will exit ",(0,n.jsx)(G,{code:"test()"})," as soon as it reaches ",(0,n.jsx)(G,{code:"return"}),"."]}),(0,n.jsxs)("p",{children:["Moving the second print statement before the ",(0,n.jsx)(G,{code:"return"})," fixes the issue:"]}),(0,n.jsx)(ej,{startingCode:["# Correct"," ","def test():",'	print("First print")','	print("Second print")',"	return 1","","my_var = test()"]})]})}let eW="funcName",eD="funcType",eJ="funcExpectedArgs",eY="matchesUndefinedVarOnLine";function eM(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=ef(eW,"",t),o=ef(eD,"",t);return ef(eJ,"",t),ef(eY,"-1",t),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["Add ",(0,n.jsx)(G,{code:"()"})," after ",(0,n.jsx)(G,{code:i})," to call the function"]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:i})," is used on line ",s," without parentheses. If you meant to call the ","userDefinedFunction"===o?"function":"Python function"," with the same name, add ",(0,n.jsx)(G,{code:"()"})," after the name and pass any expected arguments."]}),(0,n.jsxs)("p",{children:["Note: In Python, functions can be passed as arguments or assigned to variables like any other value. If this was the intention on line ",s,", then leave the code as it is."]}),(0,n.jsx)("h2",{children:"An example"}),(0,n.jsx)("p",{children:"Run the code below:"}),"userDefinedFunction"===o?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(ej,{startingCode:["# Incorrect"," ","def squared(x):","	return x * x","",'num = int(input("Enter a whole number: "))',"result = squared",'print(num, "squared is", result)']}),(0,n.jsxs)("p",{children:["In the last line of output, notice that the ",(0,n.jsx)(G,{code:"result"})," variable's value is ",(0,n.jsx)(G,{code:"<function squared>"}),". This is because the programmer has forgotten to include the parentheses and argument when calling ",(0,n.jsx)(G,{code:"squared"})," on line 5. Because of this, the function is not called but is assigned to the variable ",(0,n.jsx)(G,{code:"result"}),"."]}),(0,n.jsx)("p",{children:"Here is the corrected code. Line 5 has changed."}),(0,n.jsx)(ej,{startingCode:["# Correct"," ","def squared(x):","	return x * x","",'num = int(input("Enter a whole number: "))',"result = squared(num)",'print(num, "squared is", result)']})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(ej,{startingCode:["# Incorrect"," ","name = input",'print("Hello, ", name)']}),(0,n.jsxs)("p",{children:["In the last line of output, notice that the ",(0,n.jsx)(G,{code:"name"})," variable's value is ",(0,n.jsx)(G,{code:"<built-in function input>"}),". This is because the programmer has forgotten to include the parentheses and argument when calling ",(0,n.jsx)(G,{code:"input"})," on line 1. Because of this, the function is not called but is assigned to the variable ",(0,n.jsx)(G,{code:"name"}),"."]}),(0,n.jsx)("p",{children:"Here is the corrected code. Line 1 has changed."}),(0,n.jsx)(ej,{startingCode:["# Correct"," ",'name = input("What is your name? ")','print("Hello, ", name)']})]})]})}function eO(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1;t.has("localScope")&&t.getAll("localScope");let i=t.has("localFunction")?t.getAll("localFunction"):[],o=eg(t,"text"),a=()=>1===i.length&&"NA"!==i[0]?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h2",{children:["Why doesn't ",(0,n.jsx)(G,{code:o})," on line ",s," get it's value from ",(0,n.jsx)(G,{code:o})," in ",(0,n.jsx)(G,{code:i[0]+"()"}),"?"]}),(0,n.jsxs)("p",{children:["The answer is ",(0,n.jsx)("strong",{children:"scope"}),". Variables defined in functions have ",(0,n.jsx)("strong",{children:"local scope"}),". This means they only exist in the function where they were defined."]}),(0,n.jsxs)("p",{children:["In your code, ",(0,n.jsx)(G,{code:o})," in ",(0,n.jsx)(G,{code:i[0]+"()"})," is ",(0,n.jsx)("strong",{children:"local"})," to the function ",(0,n.jsx)(G,{code:i[0]+"()"}),"."]}),(0,n.jsxs)("p",{children:["The code on line ",s," is in ",(0,n.jsx)("strong",{children:"global"})," scope. Code in global scope is outside of a function and cannot access code in local scope. Python considers ",(0,n.jsx)(G,{code:o})," on line ",s," to be a completely different variable from ",(0,n.jsx)(G,{code:o})," in ",(0,n.jsx)(G,{code:i[0]+"()"}),"."]}),(0,n.jsx)("p",{children:"The examples below provide hints for how to fix scope issues."})]}):1===i.length&&"NA"===i[0]?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h2",{children:["But there is already a variable called ",(0,n.jsx)(G,{code:o})," defined in my code..."]}),(0,n.jsxs)("p",{children:["Python views ",(0,n.jsx)(G,{code:o})," on line ",s," as different to the other ",(0,n.jsx)(G,{code:o})," because of ",(0,n.jsx)("strong",{children:"scope"}),". Variables defined in functions have ",(0,n.jsx)("strong",{children:"local scope"}),". This means they only exist in the function where they were defined."]}),(0,n.jsxs)("p",{children:["In your code, line ",s," is in ",(0,n.jsx)("strong",{children:"global"})," scope. Code in global scope is outside of a function and cannot access code in local scope. Python considers ",(0,n.jsx)(G,{code:o})," on line ",s," to be a completely different variable from ",(0,n.jsx)(G,{code:o})," in local scope."]}),(0,n.jsx)("p",{children:"The examples below provide hints for how to fix scope issues."})]}):i.length>1?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h2",{children:["But there is already a variable called ",(0,n.jsx)(G,{code:o})," defined in my code..."]}),(0,n.jsxs)("p",{children:["Python views ",(0,n.jsx)(G,{code:o})," on line ",s," as different to the other ",(0,n.jsx)(G,{code:o})," variables because of ",(0,n.jsx)("strong",{children:"scope"}),". Variables defined in functions have ",(0,n.jsx)("strong",{children:"local scope"}),". This means they only exist in the function where they were defined."]}),(0,n.jsxs)("p",{children:["In your code, line ",s," is in ",(0,n.jsx)("strong",{children:"global"})," scope. Code in global scope is outside of a function and cannot access code in local scope. Python considers ",(0,n.jsx)(G,{code:o})," on line ",s," to be a completely different variable from ",(0,n.jsx)(G,{code:o})," in local scope."]}),(0,n.jsx)("p",{children:"The examples below provide hints for how to fix scope issues."})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Could you have a scope issue?"}),(0,n.jsxs)("p",{children:["Variables defined in functions have ",(0,n.jsx)("strong",{children:"local scope"}),". This means they only exist in the function where they were defined."]}),(0,n.jsxs)("p",{children:["In your code, there is another ",(0,n.jsx)(G,{code:o})," variable defined in a function. Variables defined in functions have ",(0,n.jsx)("strong",{children:"local scope"}),". This means they only exist in the function where they were defined."]}),(0,n.jsxs)("p",{children:["The code on line ",s," is in ",(0,n.jsx)("strong",{children:"global"})," scope. Code in global scope is outside of a function and cannot access code in local scope. Python considers ",(0,n.jsx)(G,{code:o})," on line ",s," to be a completely different variable from ",(0,n.jsx)(G,{code:o})," in local scope."]}),(0,n.jsx)("p",{children:"The examples below provide hints for how to fix scope issues."})]});return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:[(0,n.jsx)(G,{code:o})," on line ",s," is undefined"]}),(0,n.jsxs)("p",{children:["Did you forget to assign ",(0,n.jsx)(G,{code:o})," a value? If so, you can fix this error by assigning a value to ",(0,n.jsx)(G,{code:o})," before using it on line ",s,"."]}),a(),(0,n.jsx)("h2",{children:"Examples"}),(0,n.jsx)("p",{children:"Run the code below and take note of the error message:"}),(0,n.jsx)(ej,{startingCode:["def squared(x):","	return x * x","","print(squared(x))"]}),(0,n.jsxs)("p",{children:["The error occurs because ",(0,n.jsx)(G,{code:"x"})," on line 4 has not been assigned a value in this scope. This error can easily be fixed by assigning ",(0,n.jsx)(G,{code:"x"})," a value before it is called:"]}),(0,n.jsx)(ej,{startingCode:["def squared(x):","	return x * x","","x = 100","print(squared(x))"]}),(0,n.jsx)("p",{children:"This next example is a little different:"}),(0,n.jsx)(ej,{startingCode:["def one_to_n(n):","	total = 0","	for i in range(1, n + 1, 1):","		total += i","","one_to_n(10)","print(total)"]}),(0,n.jsxs)("p",{children:["This time the error occurs because the programmer has tried to access the variable ",(0,n.jsx)(G,{code:"total"})," which only exists inside the ",(0,n.jsx)(G,{code:"one_to_n()"})," function. To fix this, return ",(0,n.jsx)(G,{code:"total"})," from the function and assign it to a different variable outside of the function:"]}),(0,n.jsx)(ej,{startingCode:["def one_to_n(n):","	total = 0","	for i in range(1, n + 1, 1):","		total += i","	return total","","test = one_to_n(10)","print(test)"]})]})}let eL="text",eq="form",eV="variableAssigned",eU="condition",eZ="valueAssigned",ez=e=>{let t=0;for(let s=0;s<e.length;s++)if(" "===e.charAt(s))t++;else break;return t},eG=e=>{let t=e.split("\n"),s=Math.min(...t.slice(1).map(e=>ez(e))),n=t.slice(1).map(e=>e.substring(s));return n.unshift(t[0]),n};function eQ(e){let{misconInfo:t}=e,s=eG(ef(eL,"",t)),i=ef(eq,"",t),r=ef(eV,"",t);r=""!==r?(0,n.jsx)(G,{code:r}):"the variable";let o=ef(eU,"",t);o=""!==o?(0,n.jsx)(G,{code:o}):"the condition";let a=()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value returned by this ",(0,n.jsx)(G,{code:"if... else"})," is the same as the value of ",o,"."]}),(0,n.jsx)(z,{code:s}),(0,n.jsxs)("p",{children:["This means that ",o," can be returned directly. The ",(0,n.jsx)(G,{code:"if... else"})," is not needed."]}),(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Here is a similar example:"}),(0,n.jsx)(z,{code:["def less_than_ten(num):","	if num < 10:","		return True","	else:","		return False"]}),(0,n.jsxs)("p",{children:["The value returned by the ",(0,n.jsx)(G,{code:"if... else"})," is the same as the value of ",(0,n.jsx)(G,{code:"num < 10"}),". So, ",(0,n.jsx)(G,{code:"num < 10"})," can be returned directly:"]}),(0,n.jsx)(z,{code:["def less_than_ten(num):","	return num < 10:"]})]}),l=()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value assigned to ",r," by this ",(0,n.jsx)(G,{code:"if... else"})," is the same as the value of ",o,"."]}),(0,n.jsx)(z,{code:s}),(0,n.jsxs)("p",{children:["This means that ",o," can be assigned to ",r," directly. The ",(0,n.jsx)(G,{code:"if... else"})," is not needed."]}),(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Here is a similar example:"}),(0,n.jsx)(z,{code:["if num < 10:","	is_under_10 = True","else:","	is_under_10 = False"]}),(0,n.jsxs)("p",{children:["The value assigned to ",(0,n.jsx)(G,{code:"is_under_10"})," is the same as the value of ",(0,n.jsx)(G,{code:"num < 10"}),". So, ",(0,n.jsx)(G,{code:"num < 10"})," can be assigned directly:"]}),(0,n.jsx)(z,{code:["is_under_10 = num < 10:"]})]});return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["This ",(0,n.jsx)(G,{code:"if... else"})," could be replaced by a single line"]}),i===eZ?l():a(),(0,n.jsx)("h2",{children:"Try it out"}),i===eZ?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["After the ",(0,n.jsx)(G,{code:"if... else"})," below, the value of ",(0,n.jsx)(G,{code:"is_tall_enough"})," will always be the same as ",(0,n.jsx)(G,{code:"height > 100"}),"."]}),(0,n.jsx)(ej,{startingCode:["# Before"," ",'height = int(input("Enter your height in CM: "))',"if height > 100:","	is_tall_enough = True","else:","	is_tall_enough = False","print(is_tall_enough)"]}),(0,n.jsxs)("p",{children:["This means that the ",(0,n.jsx)(G,{code:"if... else"})," can be removed and ",(0,n.jsx)(G,{code:"height > 100"})," can be directly assigned to ",(0,n.jsx)(G,{code:"is_tall_enough"}),":"]}),(0,n.jsx)(ej,{startingCode:["# After"," ",'height = int(input("Enter your height in CM: "))',"is_tall_enough = height > 100","print(is_tall_enough)"]})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value returned by the ",(0,n.jsx)(G,{code:"if... else"})," in ",(0,n.jsx)(G,{code:"check_height()"})," will always be the same as ",(0,n.jsx)(G,{code:"height_in_cm > 100"}),"."]}),(0,n.jsx)(ej,{startingCode:["# Before"," ","def check_height(user_in):","	height_in_cm = int(user_in)","	if height_in_cm > 100:","		return True","	else:","		return False","",'height = int(input("Enter your height in CM: "))',"print(check_height(height))"]}),(0,n.jsx)("p",{children:"This means that the conditional can be removed and the boolean expression can be returned directly:"}),(0,n.jsx)(ej,{startingCode:["# After"," ","def check_height(user_in):","	height_in_cm = int(user_in)","	return height_in_cm > 100","",'height = int(input("Enter your height in CM: "))',"print(check_height(height))"]})]})]})}function eX(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=ef("paramName","",t),o=ef("functionName","",t);return o=""!==o?(0,n.jsx)(G,{code:o+"()"}):"the function",(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["The value of ",""!==i?(0,n.jsxs)(n.Fragment,{children:["the argument ",(0,n.jsx)(G,{code:i})]}):"an argument"," is replaced before it can be used"]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:i})," is a parameter, which means its value is set when ",o," is called. However, on line ",s,", the passed in value is replaced. This means that the value passed in to ",(0,n.jsx)(G,{code:i})," will not have any effect in the function."]}),(0,n.jsx)("h2",{children:"How to fix?"}),(0,n.jsx)("p",{children:"Avoid setting the value of a parameter inside a function, at least before the parameter has been used. This will allow the code that calls the function to set the parameter value, making the function more reusable."}),(0,n.jsx)("p",{children:"Read the code below:"}),(0,n.jsx)(ej,{startingCode:["# Before","","def farenheit_to_celsius(f):",'	f = float(input("Enter the temperature in Farenheit: "))',"	return (f - 32) * 5/9","","print(farenheit_to_celsius(32))"]}),(0,n.jsxs)("p",{children:["The value of ",(0,n.jsx)(G,{code:"f"})," is replaced on line 2. This means that the value passed to ",(0,n.jsx)(G,{code:"f"})," when the function is called on line 5 is ignored."]}),(0,n.jsxs)("p",{children:["To fix this issue, remove the line of code that replaces ",(0,n.jsx)(G,{code:"f"}),":"]}),(0,n.jsx)(ej,{startingCode:["# After","","def farenheit_to_celsius(f):","	return (f - 32) * 5/9","","print(farenheit_to_celsius(32))"]}),(0,n.jsx)("p",{children:"If the programmer still wants to ask the user to enter a temperature, they can put this code outside the function then pass the user's value to the function when it is called:"}),(0,n.jsx)(ej,{startingCode:["def farenheit_to_celsius(f):","	return (f - 32) * 5/9","",'temp = float(input("Enter the temperature in Farenheit: "))',"print(farenheit_to_celsius(temp))"]})]})}let eK="variant",e$="expressionNoValueType",e0="expressionNoValueUsage",e1="expressionNoValueText",e2="expressionNoValueTarget",e4="isFuncPrintNoReturn",e3="expressionUnusedType",e5="expressionUnusedText",e9="isFuncPrintsAndReturns",e6={assignment:"assignment",print:"print",functionArgument:"functionArgument",comparison:"comparison",calculation:"calculation",return:"return"},e7="builtInFunction",e8=e=>{let t=eg(e,eK),s=e.has(r)?Number(e.get(r)):-1;switch(t){case"AssignedNoReturn":let n=eg(e,e$),i=eg(e,e1);return new tu(s,n,i,eg(e,e0),eg(e,e2),e.has(e4));case N:return new tC(s,eg(e,e3),eg(e,e5),e.has(e9));default:return new te(s,"","")}};class te{createHeading(){return(0,n.jsx)("h1",{children:"Printing a value is different from returning a value"})}createHelpSummary(){return(0,n.jsx)("p",{children:"Something useful but generic here!"})}createInteractive(){return(0,n.jsx)("p",{children:"Something useful but generic here!"})}createExample(){return(0,n.jsx)("p",{children:"Something useful but generic here!"})}constructor(e,t,s){this.lineNumber=e,this.expressionType=t,this.expressionText=s}}var tt=new WeakSet,ts=new WeakSet,tn=new WeakSet,ti=new WeakSet,tr=new WeakSet,to=new WeakSet,ta=new WeakSet,tl=new WeakSet,tc=new WeakSet,th=new WeakSet,td=new WeakSet;class tu extends te{createHeading(){return(0,n.jsxs)("h1",{children:[(0,n.jsx)(G,{code:this.expressionText})," has no value"]})}createHelpSummary(){if((0,L._)(this,tt,tx).call(this)){let e=(0,n.jsxs)(n.Fragment,{children:["If you would like to save the message as a variable AND print it, assign the message to ",(0,n.jsx)(G,{code:this.assignedNoneTarget})," then print ",(0,n.jsx)(G,{code:this.assignedNoneTarget})," on a later line."]});return(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"print()"})," function prints a message to the terminal but it does not have a value. ",(0,L._)(this,ts,tp).call(this),"assignment"===this.expressionType&&this.assignedNoneTarget?e:""]})}return this.funcPrints?(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:this.expressionText.split("(")[0]+"()"})," prints a message but does not return a value. ",(0,L._)(this,ts,tp).call(this)]}):(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:this.expressionText.split("(")[0]})," does not return a value. ",(0,L._)(this,ts,tp).call(this)]})}createExample(){switch(this.assignedNoneUsage){case e6.print:break;case e6.assignment:return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Here is a similar example:"}),(0,n.jsx)(z,{code:["# Incorrect","","def times_two(num):","	result = num * 2","	print(result)","","","double = times_two(5)"]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:"times_two()"})," prints but doesn't return so the value of ",(0,n.jsx)(G,{code:"double"})," will be ",(0,n.jsx)(G,{code:"None"}),". Replacing the ",(0,n.jsx)(G,{code:"print()"})," with a ",(0,n.jsx)(G,{code:"return"})," fixes the issue:"]}),(0,n.jsx)(z,{code:["# Correct","","def times_two(num):","	result = num * 2","	return result","","","double = times_two(5)"]})]});case e6.comparison:return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Here is a similar example:"}),(0,n.jsx)(z,{code:["# Incorrect","","def times_two(num):","	result = num * 2","	print(result)","","print(times_two(5) == 10)"]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:"times_two()"})," doesn't return so  ",(0,n.jsx)(G,{code:"print(times_two(5) == 10)"})," will print ",(0,n.jsx)(G,{code:"False"}),". Replacing the ",(0,n.jsx)(G,{code:"print()"})," in the function with a ",(0,n.jsx)(G,{code:"return"})," fixes the issue:"]}),(0,n.jsx)(z,{code:["# Correct","","def times_two(num):","	result = num * 2","	return result","","print(times_two(5) == 10)"]})]});case e6.functionArgument:case e6.return:default:return(0,n.jsx)(n.Fragment,{})}}createInteractive(){if((0,L._)(this,tt,tx).call(this))switch(this.assignedNoneUsage){case e6.assignment:return(0,L._)(this,tn,tj).call(this);case e6.functionArgument:return(0,L._)(this,to,tm).call(this);case e6.comparison:return(0,L._)(this,tl,tb).call(this);case e6.calculation:return(0,L._)(this,tc,tw).call(this);case e6.return:return(0,L._)(this,th,tv).call(this)}else switch(this.assignedNoneUsage){case e6.assignment:return(0,L._)(this,ti,tg).call(this);case e6.comparison:return(0,L._)(this,tr,tf).call(this);case e6.print:return(0,L._)(this,td,tT).call(this);case e6.functionArgument:return(0,L._)(this,ta,ty).call(this);case e6.return:return(0,L._)(this,th,tv).call(this)}return(0,n.jsx)(n.Fragment,{})}constructor(e,t,s,n,i,r){super(e,t,s),(0,q._)(this,tt),(0,q._)(this,ts),(0,q._)(this,tn),(0,q._)(this,ti),(0,q._)(this,tr),(0,q._)(this,to),(0,q._)(this,ta),(0,q._)(this,tl),(0,q._)(this,tc),(0,q._)(this,th),(0,q._)(this,td),this.assignedNoneUsage=n,this.assignedNoneTarget=i,this.funcPrints=r}}function tx(){return 0===this.expressionText.indexOf("print(")}function tp(){switch(this.assignedNoneUsage){case e6.print:let e=this.funcPrints?(0,n.jsxs)(n.Fragment,{children:["The ",(0,n.jsx)(G,{code:"".concat(this.expressionText.split("(")[0],"()")})," function already prints a value when it is called so there is no need to pass the function call to ",(0,n.jsx)(G,{code:"print()"}),"."]}):(0,n.jsx)(n.Fragment,{});return(0,n.jsxs)(n.Fragment,{children:["Passing ",(0,n.jsx)(G,{code:this.expressionText})," to the ",(0,n.jsx)(G,{code:"print()"})," function will print ",(0,n.jsx)(G,{code:"None"})," in the terminal. ",e]});case e6.assignment:let t=this.funcPrints?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["One way to fix this is to edit ",(0,n.jsx)(G,{code:"".concat(this.expressionText.split("(")[0],"()")}),"  so that it returns the value instead of printing it."]}),(0,n.jsxs)("p",{children:["Another option is to call ",(0,n.jsx)(G,{code:"".concat(this.expressionText.split("(")[0],"()")})," without assigning it to a variable."]})]}):(0,n.jsx)(n.Fragment,{});return(0,n.jsxs)(n.Fragment,{children:["This means the value of ",(0,n.jsx)(G,{code:this.expressionText})," will be ",(0,n.jsx)(G,{code:"None"})," so ","undefined"!==this.assignedNoneTarget?(0,n.jsx)(G,{code:this.assignedNoneTarget}):"the variable it is assigned to"," will be ",(0,n.jsx)(G,{code:"None"})," too. ",t]});case e6.comparison:return(0,n.jsxs)("p",{children:["To fix this, edit ",(0,n.jsx)(G,{code:"".concat(this.expressionText.split("(")[0],"()")}),"  so that it returns the value instead of printing it."]});case e6.functionArgument:let s=this.funcPrints?(0,n.jsxs)(n.Fragment,{children:["If you were expecting ","undefined"!==this.assignedNoneTarget?(0,n.jsx)(G,{code:this.assignedNoneTarget}):"the argument"," to have the value currently printed to the terminal, then you can modify ",(0,n.jsx)(G,{code:"".concat(this.expressionText.split("(")[0],"()")})," to return the value instead of printing it."]}):(0,n.jsx)(n.Fragment,{});return(0,n.jsxs)(n.Fragment,{children:["As a result, the value of the argument that ",(0,n.jsx)(G,{code:this.expressionText})," is passed to will be ",(0,n.jsx)(G,{code:"None"}),". ",s]});case e6.return:return(0,n.jsxs)(n.Fragment,{children:["This means the value of ",(0,n.jsx)(G,{code:this.expressionText})," will be ",(0,n.jsx)(G,{code:"None"}),", which in turn means the return statement that calls ",(0,n.jsx)(G,{code:this.expressionText})," will also have no value."]});default:return(0,n.jsxs)(n.Fragment,{children:["This means the value of ",(0,n.jsx)(G,{code:this.expressionText})," will be ",(0,n.jsx)(G,{code:"None"}),"."]})}}function tj(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example"}),(0,n.jsxs)("p",{children:["In your code, ",(0,n.jsx)(G,{code:"print()"})," is assigned to a variable, ",(0,n.jsx)(G,{code:this.assignedNoneTarget}),". If you would like ",(0,n.jsx)(G,{code:this.assignedNoneTarget})," to store the text you have passed to ",(0,n.jsx)(G,{code:"print()"}),", assign the text to ",(0,n.jsx)(G,{code:this.assignedNoneTarget})," in a separate statement e.g.:"]}),(0,n.jsx)(z,{code:"".concat(this.assignedNoneTarget,' = "Your text"')}),(0,n.jsx)("p",{children:"If you would also like to print the text to the terminal, you can print the variable on another line e.g.:"}),(0,n.jsx)(z,{code:"print(".concat(this.assignedNoneTarget,")")}),(0,n.jsxs)("p",{children:["If you just want to print the text and don't need to store it, you can pass it directly to ",(0,n.jsx)(G,{code:"print()"})," without assigning a variable:"]}),(0,n.jsx)(z,{code:'print("Your text")'}),(0,n.jsx)("h2",{children:"More detail"}),(0,n.jsx)("p",{children:"Run the code below:"}),(0,n.jsx)(ej,{startingCode:"".concat(this.assignedNoneTarget,' = print("Hello, World!")\nprint(').concat(this.assignedNoneTarget,")")}),(0,n.jsxs)("p",{children:['You should see two lines of output: "Hello, World!" and "None". The first line is printed by ',(0,n.jsx)(G,{code:"print()"})," on line 1. The second line is printed by the code on line 2, which prints the value of ",(0,n.jsx)(G,{code:this.assignedNoneTarget}),". This variable will always have the value ",(0,n.jsx)(G,{code:"None"}),", no matter what text is passed to ",(0,n.jsx)(G,{code:"print()"}),". This is because ",(0,n.jsx)(G,{code:"print()"})," does not return a value even though you can see its output in the terminal. Try changing the text passed to ",(0,n.jsx)(G,{code:"print()"})," in line 1 and running the code again. You will see that the second line of output in the terminal will still be ",(0,n.jsx)(G,{code:"None"}),"."]}),(0,n.jsx)("p",{children:"Now run this revised code:"}),(0,n.jsx)(ej,{startingCode:"".concat(this.assignedNoneTarget,' = "Hello, World!"\nprint(').concat(this.assignedNoneTarget,")")}),(0,n.jsxs)("p",{children:["You will see that it still prints the text to the terminal but it no longer prints the extra line, ",(0,n.jsx)(G,{code:"None"}),"."]}),(0,n.jsx)("p",{children:"Lastly, if you don't need to save the text to use it elsewhere, you can just print the text directly. Run the code below. You will see that it has the same output as the previous version."}),(0,n.jsx)(ej,{startingCode:'print("Hello, World!")'})]})}function tg(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsx)("p",{children:"Read and run the code below:"}),(0,n.jsx)(ej,{startingCode:["# Incorrect","","def check_password_length(pwd):","	if len(pwd) < 5:",'		print("Too short!")',"	else:",'		print("Valid length")',"",'result = check_password_length("12345")',"print(result)"]}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"check_password_length()"}),' function does not return anything but it does print a message. When the code runs, two statements are printed: "Valid length" and "None". The problem is on line 7, where the function call is assigned to ',(0,n.jsx)(G,{code:"result"}),". The function has no return so the value of ",(0,n.jsx)(G,{code:"result"})," will be ",(0,n.jsx)(G,{code:"None"}),". "]}),(0,n.jsx)("h3",{children:"Option 1"}),(0,n.jsxs)("p",{children:["The best way to improve the code is to modify ",(0,n.jsx)(G,{code:"check_password_length()"})," to return a Boolean (",(0,n.jsx)(G,{code:"True"})," or ",(0,n.jsx)(G,{code:"False"}),") instead of printing:"]}),(0,n.jsx)(ej,{startingCode:["def check_password_length(pwd):","	if len(pwd) < 5:","		return False","	else:","		return True","",'result = check_password_length("12345")',"print(result)"]}),(0,n.jsx)("h3",{children:"Option 2"}),(0,n.jsx)("p",{children:"Another way to improve the code is to keep the function as it was and call it without assigning it to a variable. The downside of this approach is that the result of the length check cannot be used anywhere else in the code:"}),(0,n.jsx)(ej,{startingCode:["def check_password_length(pwd):","	if len(pwd) < 5:",'		print("Too short!")',"	else:",'		print("Valid length")',"",'check_password_length("12345")']})]})}function tf(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsx)("p",{children:"Read and run the code below:"}),(0,n.jsx)(ej,{startingCode:["# Incorrect","","def get_last_letter(word):","	last_letter = word[-1]","	print(last_letter)","",'print(get_last_letter("apple") == "e")']}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"get_last_letter()"}),' function does not return anything but it does print a message. When the code runs, two statements are printed: "e" and "None". The problem is on line 7, which checks if the value returned by the function is "e". The function has no return so this comparison will be ',(0,n.jsx)(G,{code:"False"}),". "]}),(0,n.jsxs)("p",{children:["The best way to improve the code is to modify ",(0,n.jsx)(G,{code:"get_last_letter()"})," to return the last letter instead of printing:"]}),(0,n.jsx)(ej,{startingCode:["# Correct","","def get_last_letter(word):","	last_letter = word[-1]","	return last_letter","",'print(get_last_letter("apple") == "e")']})]})}function tm(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"How to fix this?"}),(0,n.jsxs)("p",{children:["Try passing just the text that is printed instead of the ",(0,n.jsx)(G,{code:"print"})," function."]}),(0,n.jsx)("h2",{children:"More detail"}),(0,n.jsxs)("p",{children:["Read the code below. There is a mistake when calling ",(0,n.jsx)(G,{code:"greeting()"})," on line 5."]}),(0,n.jsx)(ej,{startingCode:["def greeting(name):",'	message = "Hello, " + name',"	return message","",'greeting(print("Test"))']}),(0,n.jsxs)("p",{children:['If you run the code, you will see two lines of output: "Test" and an error message. The error occurs because the ',(0,n.jsx)(G,{code:"print()"})," function is passed to ",(0,n.jsx)(G,{code:"greeting()"}),". This means the value of ",(0,n.jsx)(G,{code:"name"})," is ",(0,n.jsx)(G,{code:"None"}),". On line 2, Python doesn't know how to combine a string, ",(0,n.jsx)(G,{code:'"Hello, "'}),", with ",(0,n.jsx)(G,{code:"None"}),", which causes the error message."]}),(0,n.jsxs)("p",{children:["To fix the error message, pass the string directly to ",(0,n.jsx)(G,{code:"greeting()"})," as shown below:"]}),(0,n.jsx)(ej,{startingCode:["def greeting(name):",'	message = "Hello, " + name',"	return message","",'greeting("Test")']}),(0,n.jsxs)("p",{children:["Now the code runs without error but it no longer prints the message returned by ",(0,n.jsx)(G,{code:"greeting()"}),". Here is how to test the function by printing the message it returns:"]}),(0,n.jsx)(ej,{startingCode:["def greeting(name):",'	message = "Hello, " + name',"	return message","",'print(greeting("Test"))','print(greeting("Abc"))','print(greeting("friend"))']})]})}function ty(){return this.funcPrints?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Read and run the code below. Try entering a name in all lowercase:"}),(0,n.jsx)(ej,{startingCode:["def format_name(name):","	print(name.capitalize())","","def greeting(name):",'	print("Hello", name)',"",'name = input("What\'s your name? ")',"formatted = format_name(name)","greeting(formatted)"]}),(0,n.jsxs)("p",{children:['The code produces two lines of output after the input prompt. First it prints the name entered by the user with the first letter capitalised. Then it prints "Hello None". The name is printed because ',(0,n.jsx)(G,{code:"format_name()"}),' prints the formatted name on line 2. "Hello None" is printed by ',(0,n.jsx)(G,{code:"greeting()"}),' on line 5. The name is "None" because ',(0,n.jsx)(G,{code:"formatted"})," is ",(0,n.jsx)(G,{code:"None"})," because ",(0,n.jsx)(G,{code:"format_name()"})," doesn't return anything."]}),(0,n.jsxs)("p",{children:["This can be fixed by editing ",(0,n.jsx)(G,{code:"format_name()"})," to returns the formatted name instead of printing it:"]}),(0,n.jsx)(ej,{startingCode:["def format_name(name):","	return name.capitalize()","","def greeting(name):",'	print("Hello", name)',"",'name = input("What\'s your name? ")',"formatted = format_name(name)","greeting(formatted)"]})]}):(0,n.jsx)(n.Fragment,{})}function tb(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"How to fix this?"}),(0,n.jsxs)("p",{children:["Try removing the ",(0,n.jsx)(G,{code:"print()"})," function from the comparison. For example, instead of:"]}),(0,n.jsx)(z,{code:['name == print("Test")']}),(0,n.jsx)("p",{children:"...try:"}),(0,n.jsx)(z,{code:['name == "Test"']}),(0,n.jsx)("p",{children:"If you want to print the result of the comparison, try something like this:"}),(0,n.jsx)(z,{code:['print(name == "Test")']})]})}function tw(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"How to fix this?"}),(0,n.jsxs)("p",{children:["Try removing the ",(0,n.jsx)(G,{code:"print()"})," function and just using the value currently passed to ",(0,n.jsx)(G,{code:"print()"}),". For example, instead of:"]}),(0,n.jsx)(z,{code:['"Hello " + print(name)']}),(0,n.jsx)("p",{children:"...try:"}),(0,n.jsx)(z,{code:['"Hello " + name']}),(0,n.jsx)("p",{children:"If you want to print the result of the operation, try something like this:"}),(0,n.jsx)(z,{code:['print("Hello " + name)']})]})}function tv(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"How to fix this?"}),(0,n.jsxs)("p",{children:["If your function should ",(0,n.jsx)("em",{children:"return"})," a value that can be used outside of the function then you can remove the ",(0,n.jsx)(G,{code:"print()"})," and directly return the value currently passed to ",(0,n.jsx)(G,{code:"print()"}),". If you still want to print the returned value, you can call your function and pass the result to ",(0,n.jsx)(G,{code:"print()"})," elsewhere in your code."]}),(0,n.jsxs)("p",{children:["If your function just needs to print a message and does not need to return a value, then you can remove ",(0,n.jsx)(G,{code:"return"}),"."]}),(0,n.jsx)("h2",{children:"More detail"}),(0,n.jsxs)("p",{children:["A function that returns ",(0,n.jsx)(G,{code:"print()"})," will always return ",(0,n.jsx)("code",{children:"None"}),", which can cause problems for the code that calls the function. To see why, run the code below."]}),(0,n.jsx)(ej,{startingCode:["def check_password_length(pwd):","	if len(pwd) < 8:",'		return print("invalid")',"	else:",'		return print("valid")',"",'result = check_password_length("123")','print("Your password choice is", result)']}),(0,n.jsxs)("p",{children:['This code prints two lines to the terminal. The first line is the message printed by one of the function\'s return statements and the second line says "Your password choice is None". This happens because the function always returns ',(0,n.jsx)(G,{code:"print()"}),", which has no value, so the value assigned to ",(0,n.jsx)(G,{code:"result"})," on line 7 will be ",(0,n.jsx)(G,{code:"None"})," no matter what is passed to ",(0,n.jsx)(G,{code:"check_password_length()"}),"."]}),(0,n.jsxs)("p",{children:["This issue can be fixed by making sure the function always returns a value, rather than ",(0,n.jsx)(G,{code:"None"}),". To do this, remove ",(0,n.jsx)(G,{code:"print()"})," from the return statements and return a string instead:"]}),(0,n.jsx)(ej,{startingCode:["def check_password_length(pwd):","	if len(pwd) < 8:",'		return "invalid"',"	else:",'		return "valid"',"",'result = check_password_length("123")','print("Your password choice is", result)']})]})}function tT(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"How to fix this?"}),(0,n.jsxs)("p",{children:["Call the function by itself, not from inside ",(0,n.jsx)(G,{code:"print()"}),"."]}),(0,n.jsx)("p",{children:"Here is an example of code with a similar issue:"}),(0,n.jsx)(ej,{startingCode:["# Incorrect","","def greeting(name):",'	print("Hello", name)',"",'print(greeting("Elmo"))']}),(0,n.jsxs)("p",{children:['Run the code. Notice that the output shows "Hello Elmo", which is printed by the ',(0,n.jsx)(G,{code:"greeting()"}),' function. However, it also prints "None" on the next line. ',(0,n.jsx)(G,{code:"greeting()"})," doesn't return anything so the ",(0,n.jsx)(G,{code:"print()"})," on line 4 is ",(0,n.jsx)(G,{code:"None"}),"."]}),(0,n.jsx)("h3",{children:"Option 1"}),(0,n.jsxs)("p",{children:["Fix the problem by removing the extra ",(0,n.jsx)(G,{code:"print()"})," on line 4:"]}),(0,n.jsx)(ej,{startingCode:["# Correct","","def greeting(name):",'	print("Hello", name)',"",'greeting("Elmo")']}),(0,n.jsx)("h3",{children:"Option 2"}),(0,n.jsxs)("p",{children:["Another option is to modify ",(0,n.jsx)(G,{code:"greeting()"})," so that it returns a value instead of printing. This would make the function more flexible and easier to reuse:"]}),(0,n.jsx)(ej,{startingCode:["# Correct","","def greeting(name):",'	return "Hello " + name',"",'print(greeting("Elmo"))']})]})}var t_=new WeakSet,tF=new WeakSet;class tC extends te{createHeading(){return(0,n.jsxs)("h1",{children:["The return value of ",(0,n.jsx)(G,{code:this.expressionText+"()"})," is not used"]})}createHelpSummary(){return this.expressionType===e7?(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:this.expressionText+"()"})," returns a value but that value is not used when the function is called, so it will be lost. Look up ",(0,n.jsx)(G,{code:this.expressionText+"()"})," in the docs to see examples of how to use it."]}):this.isPrintsAndReturns?(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:this.expressionText+"()"})," function returns a value and prints to the terminal. If the return value is not needed, then the return can be deleted—the function will still print. If you would like to print AND return, then it is better to print the returned value from outside the function."]}):(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:this.expressionText+"()"})," function returns a value but that value is not saved or used when the function is called, so the result of the call will be lost."]})}createExample(){return(0,n.jsx)(n.Fragment,{})}createInteractive(){return this.expressionType===e7?(0,n.jsx)(n.Fragment,{}):this.isPrintsAndReturns?(0,L._)(this,t_,tI).call(this):(0,L._)(this,tF,tk).call(this)}constructor(e,t,s,n){super(e,t,s,n),(0,q._)(this,t_),(0,q._)(this,tF),this.isPrintsAndReturns=n}}function tI(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Read the code below:"}),(0,n.jsx)(ej,{startingCode:["def is_valid_password(pwd):",'	if len(pwd) > 3 and pwd != "123456":','		print("Your password is valid!")',"		return True","	else:",'		print("Not a valid password!")',"		return False","",'password = input("Choose a password: ")',"is_valid_password(password)"]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:"is_valid_password()"})," prints a message before returning a value. The function is called on line 10 but the value is not saved to a variable, so it is lost."]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:"is_valid_password()"})," is trying to do two things at once: (1) print a message for the user, and (2) return a value. The code can be improved by making sure ",(0,n.jsx)(G,{code:"is_valid_password()"})," only does one thing. The best approach is to remove the print statement from the function. The rest of the code can decide what to print depending on the returned value:"]}),(0,n.jsx)(ej,{startingCode:["def is_valid_password(pwd):",'	if len(pwd) > 3 and pwd != "123456":',"		return True","	else:","		return False","",'password = input("Choose a password: ")',"check = is_valid_password(password)","if check:",'	print("Your password is valid!")',"else:",'	print("Your password is invalid!")']})]})}function tk(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Read the code below:"}),(0,n.jsx)(ej,{startingCode:["def square(num):","	return num * num","","square(2)"]}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"square()"})," function returns a number. The function is called on line 3, where it is passed 2 as an argument. The result of the function call will be 4 (",(0,n.jsx)(G,{code:"2 * 2"}),") but the value is not saved so it is lost. A simple way to save the value is to assign it to a variable:"]}),(0,n.jsx)(ej,{startingCode:["def square(num):","	return num * num","","my_var = square(2)"]}),(0,n.jsxs)("p",{children:["You can also pass the returned value to a function, such as ",(0,n.jsx)(G,{code:"print()"}),":"]}),(0,n.jsx)(ej,{startingCode:["def square(num):","	return num * num","","print(square(2))"]})]})}function tN(e){let{misconInfo:t}=e,s=e8(t);return(0,n.jsxs)(n.Fragment,{children:[s.createHeading(),s.createHelpSummary(),s.createExample(),s.createInteractive()]})}var tA=s(6933);let tE="argType",tH="convertedType",tS="convertedValue",tR=e=>["a","e","i","o","u"].some(t=>t===e.charAt(0))?"an":"a",tP=e=>"string"===e?(0,n.jsx)(G,{code:"str()"}):(0,n.jsx)(G,{code:e+"()"});function tB(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1;eg(t,tE);let i=eg(t,tH),o=eg(t,tS),a=eg(t,"text");return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{children:"Unnecessary type conversion"}),(0,n.jsxs)("p",{children:["On line ",s,", ",tP(i)," is called to convert ",(0,n.jsx)(G,{code:o})," to ",tR(i)," ",i,":"]}),(0,n.jsx)(z,{code:a}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:o})," is already ",tR(i)," ",i," so it is not necessary to convert it."]}),(0,n.jsx)("h2",{children:"More detail"}),(0,n.jsxs)("p",{children:["Python uses ",(0,n.jsx)("strong",{children:"dynamic typing"})," to figure out the data type of variables and other values. This means that you do not need to specify the data type of a value."]}),(0,n.jsxs)("p",{children:["It is only necessary to use one of Python's type conversion functions (e.g. ",(0,n.jsx)(G,{code:"int()"}),", ",(0,n.jsx)(G,{code:"float()"}),", or ",(0,n.jsx)(G,{code:"str()"}),") if the data type needs to change."]}),(0,n.jsxs)("p",{children:["You should never need to use a type conversion function with a literal value. If you are unsure of the type of a variable or a value returned by a function, you can use the ",(0,n.jsx)(G,{code:"type()"})," function to check it. The text area below is running Python in interactive mode. Try calling the ",(0,n.jsx)(G,{code:"type()"})," function with different values. Some suggestions are below the text area. To use interactive mode, type a line of Python code and press Enter."]}),(0,n.jsx)(tA.Z,{}),(0,n.jsx)("p",{children:"Try each of the following in the textarea above:"}),(0,n.jsxs)("ul",{children:[(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:"type(10)"})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:"type(25.5)"})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:"type(False)"})}),(0,n.jsx)("li",{children:(0,n.jsx)(G,{code:"type('hello')"})})]}),(0,n.jsxs)("p",{children:["Here is an example where it ",(0,n.jsx)("em",{children:"is"})," necessary to convert the data type of a value:"]}),(0,n.jsx)(ej,{startingCode:["# Before","",'age = input("Enter your age: ")',"dog_age = age * 7",'print("You are", dog_age, "in dog years")']}),(0,n.jsxs)("p",{children:["If you run the code, you will see the age you enter at the prompt printed 7 times in a line, instead of the calculated age in dog years. This occurs because the ",(0,n.jsx)(G,{code:"input()"})," function always returns a string, even if the user enters a number. Multiplying a string by an integer, ",(0,n.jsx)(G,{code:"n"}),", creates a new string with the original string repeated ",(0,n.jsx)(G,{code:"n"})," times. This can be fixed by using the ",(0,n.jsx)(G,{code:"int()"})," or ",(0,n.jsx)(G,{code:"float()"})," function to convert the input string to a number:"]}),(0,n.jsx)(ej,{startingCode:["# After","",'age = int(input("Enter your age: "))',"dog_age = age * 7",'print("You are", dog_age, "in dog years")']})]})}let tW="expressionUnusedType",tD="expressionUnusedText",tJ="returnType",tY="builtInFunction",tM=e=>{let t=e.has(r)?Number(e.get(r)):-1;return new tO(t,eg(e,tW),eg(e,tD),ef(tJ,"value",e))};class tO{createHeading(){return(0,n.jsxs)("h1",{children:["The ",this.returnType," returned by ",(0,n.jsx)(G,{code:this.unusedText+"()"})," is not used"]})}createHelpSummary(){return this.unusedType===tY?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:this.unusedText+"()"})," is a Python function that returns a ",this.returnType,". When ",(0,n.jsx)(G,{code:this.unusedText+"()"})," is called on line ",this.lineNumber,", it's return value is not saved or used, so it will be lost."]}),(0,n.jsx)("p",{children:"One way to save the result of a function call is to assign it to a variable."})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:this.unusedText+"()"})," function returns a ",this.returnType,". When ",(0,n.jsx)(G,{code:this.unusedText+"()"})," is called on line ",this.lineNumber,", it's return value is not saved or used, so it will be lost."]}),(0,n.jsx)("p",{children:"One way to save the result of a function call is to assign it to a variable."})]})}createInteractive(){return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example"}),(0,n.jsx)("p",{children:"Read the code below:"}),(0,n.jsx)(ej,{startingCode:["def square(num):","	return num * num","","square(2)"]}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"square()"})," function returns a number. The function is called on line 3. It is passed 2 as an argument. The result of the function call will be 4 but the value is not saved so it is lost. A simple way to save the value is to assign it to a variable:"]}),(0,n.jsx)(ej,{startingCode:["def square(num):","	return num * num","","my_var = square(2)"]}),(0,n.jsxs)("p",{children:["You can also pass the returned value to a function, such as ",(0,n.jsx)(G,{code:"print()"}),":"]}),(0,n.jsx)(ej,{startingCode:["def square(num):","	return num * num","","print(square(2))"]})]})}constructor(e,t,s,n){this.lineNumber=e,this.unusedType=t,this.unusedText=s,this.returnType=n}}function tL(e){let{misconInfo:t}=e,s=tM(t);return(0,n.jsxs)(n.Fragment,{children:[s.createHeading(),s.createHelpSummary(),s.createInteractive()]})}function tq(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=ef("text","",t);return ef("returnValueType","",t),ef("returnValueText","",t),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:[(0,n.jsx)(G,{code:"return"})," does not need ",(0,n.jsx)(G,{code:"()"})]}),(0,n.jsxs)("p",{children:["The value returned on line ",s," is inside brackets, ",(0,n.jsx)(G,{code:"()"}),":"]}),(0,n.jsx)(z,{code:i}),(0,n.jsx)("p",{children:"These brackets are not necessary and should be removed. For example, instead of:"}),(0,n.jsx)(z,{code:["def my_func():","	# Unnecessary brackets","	return ('Hello, World!')"]}),(0,n.jsx)("p",{children:"...return the value directly:"}),(0,n.jsx)(z,{code:["def my_func():","	# Better","	return 'Hello, World!'"]}),(0,n.jsx)("h2",{children:"Why does this matter?"}),(0,n.jsx)("p",{children:"Extra brackets do not affect how your code runs. But, they can make the code harder to read. Avoid adding code that is not needed."}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"add_two()"})," function below has unnecessary brackets around the return value:"]}),(0,n.jsx)(ej,{startingCode:["# Unnecessary brackets"," ","def add_two(a, b):","	return(a + b)","","result = add_two(1.3, 2.4)","print(result)"]}),(0,n.jsx)("p",{children:"Try running the revised code below. The unnecessary brackets have been removed. You will see that this version has the same output as before."}),(0,n.jsx)(ej,{startingCode:["# Better"," ","def add_two(a, b):","	return a + b","","result = add_two(1.3, 2.4)","print(result)"]}),(0,n.jsx)("h3",{children:"What if there are multiple return values?"}),(0,n.jsxs)("p",{children:["Brackets are still not needed when returning more than one value from a function. Python will automatically put the values into a ",(0,n.jsx)("strong",{children:"tuple"}),"—a collection of values inside brackets."]}),(0,n.jsxs)("p",{children:["In the code below, ",(0,n.jsx)(G,{code:"v1()"})," and ",(0,n.jsx)(G,{code:"v2()"})," are almost the same. ",(0,n.jsx)(G,{code:"v1()"})," puts the return values in brackets but ",(0,n.jsx)(G,{code:"v2()"})," does not. Run the code to see that both functions have the same output."]}),(0,n.jsx)(ej,{startingCode:["# Unnecessary brackets","def v1():","	return (1, 2, 3)","","# Better","def v2():","	return 1, 2, 3","","result1 = v1()","result2 = v2()",'print("v1:", result1)','print("v2:", result2)']})]})}function tV(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=ef("parentText","",t);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["Use ",(0,n.jsx)(G,{code:"=="})," to check equality"]}),(0,n.jsxs)("p",{children:["It looks like you are checking if two or more values are equal on line ",s,"."]}),""!==i&&(0,n.jsx)(z,{code:i}),(0,n.jsxs)("p",{children:["The code above will cause a ",(0,n.jsx)(G,{code:"SyntaxError"})," because you are using ",(0,n.jsx)(G,{code:"="})," instead of ",(0,n.jsx)(G,{code:"=="}),"."]}),(0,n.jsxs)("p",{children:["Use ",(0,n.jsx)(G,{code:"=="})," to check if two values are equal."]}),(0,n.jsx)(z,{code:["day = 'Tuesday'","","# Incorrect","if day = 'Saturday':","	# Code omitted","","# Correct","if day == 'Saturday':","	# Code omitted"]}),(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:"="})," is only used to assign a value to a variable. This means ",(0,n.jsx)(G,{code:"="})," should never be used in ",(0,n.jsx)(G,{code:"if"}),", ",(0,n.jsx)(G,{code:"elif"}),", ",(0,n.jsx)(G,{code:"while"}),", or ",(0,n.jsx)(G,{code:"return"})," statements."]}),(0,n.jsxs)("p",{children:["The code below causes a ",(0,n.jsx)(G,{code:"SyntaxError"}),":"]}),(0,n.jsx)(ej,{startingCode:["age = 9","","# Incorrect syntax","if age = 10:",'	print("You are 10!")',"else:",'	print("You are not 10")']}),(0,n.jsxs)("p",{children:["To fix the error, change ",(0,n.jsx)(G,{code:"="})," to ",(0,n.jsx)(G,{code:"=="}),":"]}),(0,n.jsx)(ej,{startingCode:["age = 9","","# Correct syntax","if age == 10:",'	print("You are 10!")',"else:",'	print("You are not 10")']})]})}function tU(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=ef("text","",t),o=ef("variableName","",t);o=""!==o?(0,n.jsx)(G,{code:o}):"a variable";let a=ef("assignedValue","",t);return a=""!==a?(0,n.jsx)(G,{code:a}):"a value",(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["Use ",(0,n.jsx)(G,{code:"="})," to assign a value to a variable"]}),(0,n.jsxs)("p",{children:["It looks like you are trying to assign ",a," to ",o," on line ",s,"."]}),""!==i&&"undefined"!==i&&(0,n.jsx)(z,{code:i}),(0,n.jsxs)("p",{children:["The code above will cause a ",(0,n.jsx)(G,{code:"SyntaxError"}),". To fix this, replace ",(0,n.jsx)(G,{code:":"})," with ",(0,n.jsx)(G,{code:"="}),"."]}),(0,n.jsx)(z,{code:["# Incorrect","day: 'Tuesday'","","# Correct","day = 'Tuesday'"]}),(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:["The code below will not assign 0.99 to ",(0,n.jsx)(G,{code:"price"}),":"]}),(0,n.jsx)(ej,{startingCode:["# Incorrect syntax","price: 0.99","print(price)"]}),(0,n.jsxs)("p",{children:["To fix the error, change ",(0,n.jsx)(G,{code:":"})," to ",(0,n.jsx)(G,{code:"="}),":"]}),(0,n.jsx)(ej,{startingCode:["# Incorrect syntax","price = 0.99","print(price)"]})]})}let tZ="definitionText",tz="loopText",tG="loopVar",tQ="earlyExitLine",tX="earlyExitText";function tK(e){let{misconInfo:t}=e;t.has(r)&&t.get(r),t.has(tZ)&&t.get(tZ);let s=t.has(tz)?t.get(tz):"";t.getAll(tG);let i=t.getAll(tQ),o=t.getAll(tX),a=()=>{let e=s.indexOf("while"),t="";for(let s=0;s<e;s++)t="".concat(t," ");let n=s.split("\n");for(let s=0;s<n.length;s++)0===n[s].indexOf(t)&&(n[s]=n[s].substring(e));return n.join("\n")},l=()=>o.map((e,t)=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(G,{code:e})," on line ",i[t]]}));return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["A ",(0,n.jsx)(G,{code:"while"})," loop only runs once"]}),(0,n.jsxs)("p",{children:["The code inside this ",(0,n.jsx)(G,{code:"while"})," loop only runs once:"]}),(0,n.jsx)(z,{code:a()}),(0,n.jsxs)("p",{children:["If you only want the loop to run once, you can change ",(0,n.jsx)(G,{code:"while"})," to ",(0,n.jsx)(G,{code:"if"}),"."]}),(0,n.jsx)("h2",{children:"Why does it matter?"}),(0,n.jsxs)("p",{children:["The purpose of a ",(0,n.jsx)(G,{code:"while"})," loop is to repeat some code as long as a condition is true. If you don't need to repeat the code, it is clearer and more efficient to use ",(0,n.jsx)(G,{code:"if"}),"."]}),(0,n.jsx)("h2",{children:"But I want the loop to run more than once!"}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"while"})," loop only runs once because the following lines cause the loop to end:"]}),(0,n.jsx)("ul",{children:l().map((e,t)=>(0,n.jsx)("li",{children:e},t))}),(0,n.jsx)("p",{children:"You will need to remove or move any code that causes the loop to end."}),(0,n.jsx)("h2",{children:"Example - Fixing a broken loop"}),(0,n.jsx)("p",{children:"The loop in this code will always end the first time it runs:"}),(0,n.jsx)(ej,{startingCode:["# Incorrect","","def remove_exclamation(message):",'	while message[-1] == "!":',"		message = message[:-1]","		return message","",'result = remove_exclamation("Hello!!!!")','print(result) # Should print "Hello"']}),(0,n.jsxs)("p",{children:["The loop ends because of the ",(0,n.jsx)(G,{code:"return"})," inside the loop. Moving the ",(0,n.jsx)(G,{code:"return"})," outside the loop will fix this example:"]}),(0,n.jsx)(ej,{startingCode:["# Correct","","def remove_exclamation(message):",'	while message[-1] == "!":',"		message = message[:-1]","	return message","",'result = remove_exclamation("Hello!!!!")','print(result) # Should print "Hello"']})]})}function t$(e){let{misconInfo:t}=e;t.has(r)&&t.get(r);let s=ef("loopVariable","",t);s=""!==s?(0,n.jsx)(G,{code:s}):"the loop variable";let i=t.has("forDefinition")?t.get("forDefinition"):"",o=t.has("overwrittenVarLine")?Number(t.get("overwrittenVarLine")):-1;return t.has("overwrittenIsDefinition")&&"true"==t.get("overwrittenIsDefinition")?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{children:"For loop variables don't need to be defined outside the loop"}),(0,n.jsxs)("p",{children:['The "loop variable" in this ',(0,n.jsx)(G,{code:"for"})," loop is ",s,":"]}),(0,n.jsx)(z,{code:i}),(0,n.jsxs)("p",{children:["The value of a ",(0,n.jsx)(G,{code:"for"})," loop variable is set by the ",(0,n.jsx)(G,{code:"for"})," loop. This means you do not need to define ",s," on line ",o,"."]}),(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:["In this example, the ",(0,n.jsx)(G,{code:"for"})," loop variable, ",(0,n.jsx)(G,{code:"i"}),", is defined before the loop on line 1."]}),(0,n.jsx)(ej,{startingCode:["i = 0 # This definition is not needed","","for i in range(3):","	print(i)"]}),(0,n.jsx)("p",{children:"Here is the same example without the extra definition. Run the code. You will see it produces the same output as before."}),(0,n.jsx)(ej,{startingCode:["# Better","","for i in range(3):","	print(i)"]})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{children:"A for loop changes the value of an existing variable"}),(0,n.jsxs)("p",{children:['The "loop variable" in this ',(0,n.jsx)(G,{code:"for"})," loop is ",s,":"]}),(0,n.jsx)(z,{code:i}),(0,n.jsxs)("p",{children:["Your code already contains a variable called ",s,". Its value was last set on line ",o,". The",(0,n.jsx)(G,{code:"for"})," loop will change the value of the existing variable. If this is not your intention, give the ",(0,n.jsx)(G,{code:"for"})," loop variable a unique name."]}),(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:["In this example, ",(0,n.jsx)(G,{code:"i"})," is set to 200 on line 2. The ",(0,n.jsx)(G,{code:"for"})," loop changes the value of ",(0,n.jsx)(G,{code:"i"})," on each iteration. Run the code and notice that ",(0,n.jsx)(G,{code:"i"})," is 2 after the loop."]}),(0,n.jsx)(ej,{startingCode:["# Before","i = 200","","for i in range(3):","	print(i)","",'print("i is", i, "after the loop")']}),(0,n.jsxs)("p",{children:["Changing the name of the loop variable leaves the value of ",(0,n.jsx)(G,{code:"i"})," unchanged:"]}),(0,n.jsx)(ej,{startingCode:["# After","i = 200","","for u in range(3):","	print(u)","",'print("i is", i, "after the loop")']})]})}let t0="text",t1="parentText",t2="parentEntity",t4="boolExp",t3="return";function t5(e){let{misconInfo:t}=e,s=ef(t0,"",t),i=ef(t4,"",t),r=ef(t1,"",t),o=ef(t2,"",t);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:[(0,n.jsx)(G,{code:s})," is the same as ",(0,n.jsx)(G,{code:i})]}),(0,n.jsxs)("p",{children:["This code ",o===t3?"returns":"assigns"," a value that is the same as the ternary condition, ",(0,n.jsx)(G,{code:i}),":"]}),(0,n.jsx)(z,{code:r}),(0,n.jsxs)("p",{children:["This means that the condition can be ",o===t3?"returned":"assigned"," directly."]}),(0,n.jsx)("p",{children:"Here is a similar example:"}),o===t3?(0,n.jsx)(z,{code:["# Unnecessary ternary","return True if price < 100 else False","","# Better","return price < 100"]}):(0,n.jsx)(z,{code:["# Unnecessary ternary","on_sale = True if price < 100 else False","","# Better","on_sale = price < 100"]}),(0,n.jsx)("h2",{children:"Try it out"}),o===t3?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value returned by the ternary in ",(0,n.jsx)(G,{code:"check_height()"})," will always be the same as ",(0,n.jsx)(G,{code:"height_in_cm > 100"}),"."]}),(0,n.jsx)(ej,{startingCode:["# Before"," ","def check_height(user_in):","	height_in_cm = int(user_in)","	return True if height_in_cm > 100 else False","",'height = int(input("Enter your height in CM: "))',"print(check_height(height))"]}),(0,n.jsx)("p",{children:"This means that the ternary can be removed and the condition can be returned directly:"}),(0,n.jsx)(ej,{startingCode:["# After"," ","def check_height(user_in):","	height_in_cm = int(user_in)","	return height_in_cm > 100","",'height = int(input("Enter your height in CM: "))',"print(check_height(height))"]})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value of ",(0,n.jsx)(G,{code:"is_tall_enough"})," will always be the same as ",(0,n.jsx)(G,{code:"height > 100"}),"."]}),(0,n.jsx)(ej,{startingCode:["# Before"," ",'height = int(input("Enter your height in CM: "))',"is_tall_enough = True if height > 100 else False","print(is_tall_enough)"]}),(0,n.jsxs)("p",{children:["This means that the ternary can be removed and ",(0,n.jsx)(G,{code:"height > 100"})," can be directly assigned to ",(0,n.jsx)(G,{code:"is_tall_enough"}),":"]}),(0,n.jsx)(ej,{startingCode:["# After"," ",'height = int(input("Enter your height in CM: "))',"is_tall_enough = height > 100","print(is_tall_enough)"]})]})]})}function t9(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=t.has("text")?t.get("text"):"",o=t.has("boolValue")?t.get("boolValue"):"",a=t.has("boolLiteral")?t.get("boolLiteral"):"";return(0,n.jsxs)(n.Fragment,{children:["True"===a?(0,n.jsxs)("h1",{children:[(0,n.jsx)(G,{code:"== True"})," is not needed"]}):(0,n.jsxs)("h1",{children:[(0,n.jsx)(G,{code:i})," is the same as ",(0,n.jsx)(G,{code:"not ".concat(o)})]}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:o})," is a boolean expression. Its value is either ",(0,n.jsx)(G,{code:"True"})," or ",(0,n.jsx)(G,{code:"False"}),". The comparison on line ",s," is also a boolean expression. Its value is either ",(0,n.jsx)(G,{code:"True"})," or ",(0,n.jsx)(G,{code:"False"}),"."]}),(0,n.jsx)(z,{code:i}),"True"===a?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value of the comparison will be the same as the value of ",(0,n.jsx)(G,{code:o}),". This means the comparison is not needed. You can just use ",(0,n.jsx)(G,{code:o})," instead."]}),(0,n.jsx)("p",{children:"Here is a similar example:"}),(0,n.jsx)(z,{code:["ready = True","","# Unnecessary comparison","if ready == True:",'	print("I am ready!")',"","# Better","if ready:",'	print("I am ready!")']})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value of the comparison will be the same as ",(0,n.jsx)(G,{code:"not ".concat(o)}),". This means you can use ",(0,n.jsx)(G,{code:"not ".concat(o)})," instead of the full comparison."]}),(0,n.jsx)("p",{children:"Here is a similar example:"}),(0,n.jsx)(z,{code:["ready = False","","# Unnecessary comparison","if ready == False:",'	print("I am not ready!")',"","# Shorter","if not ready:",'	print("I am not ready!")']})]}),(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:["The code below shows both ways to check if a boolean value is ",(0,n.jsx)(G,{code:"True"}),". Run the code and check that both options print the same value."]}),(0,n.jsx)(ej,{startingCode:["is_the_weekend = True","","print(is_the_weekend == True)","print(is_the_weekend)"]}),(0,n.jsxs)("p",{children:["Try setting ",(0,n.jsx)(G,{code:"is_the_weekend"})," to ",(0,n.jsx)(G,{code:"False"}),". Both options will still print the same output."]}),(0,n.jsxs)("p",{children:["The code below shows two ways to check if a boolean value is ",(0,n.jsx)(G,{code:"False"}),"."]}),(0,n.jsx)(ej,{startingCode:["is_the_weekend = True","","print(is_the_weekend == False)","print(not is_the_weekend)"]})]})}function t6(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=ef("outerLoopText","",t),o=ef("outerLoopVariable","",t),a=t.getAll("modifiedInType"),l=t.getAll("modifiedInStartLine");return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["A ",(0,n.jsx)(G,{code:"while"})," loop might not be needed"]}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"while"})," loop on line ",s,' has a "loop variable", ',o,"."]}),(0,n.jsx)(z,{code:i}),1===a.length?(0,n.jsxs)("p",{children:["The value of a ",(0,n.jsx)(G,{code:"while"})," loop variable should be changed each time the loop runs. In your code, ",o," is only changed inside a nested ",(0,n.jsx)(G,{code:a[0]})," loop that starts on line ",l[0],". This means the ",(0,n.jsx)(G,{code:"while"})," loop might not be needed."]}):a.length>1?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The value of a ",(0,n.jsx)(G,{code:"while"})," loop variable should be changed each time the loop runs. In your code, ",o," is only changed inside nested loops: ",(0,n.jsx)(G,{code:a[0]})," loop that starts on line ",l[0],"."]}),(0,n.jsx)("ul",{children:a.map((e,t)=>(0,n.jsxs)("li",{children:["A ",(0,n.jsx)(G,{code:e})," loop starting on line ",l[t]]},t))}),(0,n.jsxs)("p",{children:["This means the ",(0,n.jsx)(G,{code:"while"})," loop might not be needed."]})]}):(0,n.jsxs)("p",{children:["The value of a ",(0,n.jsx)(G,{code:"while"})," loop variable should be changed each time the loop runs. In your code, ",o," is only changed inside nested loops. This means the ",(0,n.jsx)(G,{code:"while"})," loop might not be needed."]}),(0,n.jsx)("h2",{children:"Example"}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"while"})," loop in this example doesn't do anything:"]}),(0,n.jsx)(ej,{startingCode:["i = 0",'message = "hello"',"","# Unnecessary while loop","while i < len(message):","	for letter in message:","		print(letter)","		i += 1"]}),(0,n.jsxs)("p",{children:["Here is an improved version without the extra ",(0,n.jsx)(G,{code:"while"})," loop:"]}),(0,n.jsx)(ej,{startingCode:['message = "hello"',"","for letter in message:","	print(letter)"]}),(0,n.jsx)("p",{children:"If you run both examples, you will see the output is the same."})]})}let t7="text",t8="unusedMethod",se="unusedReturnType",st="stringValue";function ss(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=eg(t,t7),o=(0,n.jsx)(G,{code:eg(t,t8)+"()"}),a=eg(t,se),l=(0,n.jsx)(G,{code:eg(t,st)});return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{children:"String methods don't change the string"}),(0,n.jsxs)("p",{children:["The code on line ",s," calls the ",o," method on ",l,":"]}),(0,n.jsx)(z,{code:i}),(0,n.jsxs)("p",{children:["String methods like ",o," do not change the string. They return a new value instead. This means the code above will not change ",l,"."]}),(0,n.jsxs)("p",{children:["Save the new ",a," created by ",o," to a variable. You can create a new variable or reuse ",l,"."]}),(0,n.jsx)(z,{code:['test = "abc"',"","test.upper() # This code does not change test",'new_var = test.upper() # Creates a new variable with the value "ABC"','test = test.upper() # Changes the value of test to "ABC"']}),(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"swapcase()"})," method swaps the case of each letter in a string. In this code, the method has no effect because it is not saved to a variable:"]}),(0,n.jsx)(ej,{startingCode:['my_string = "Hello, World!"'," ","my_string.swapcase() # This code has no effect","print(my_string)"]}),(0,n.jsxs)("p",{children:["Assigning the result of ",(0,n.jsx)(G,{code:"swapcase()"})," to ",(0,n.jsx)(G,{code:"my_string"})," fixes the issue:"]}),(0,n.jsx)(ej,{startingCode:['my_string = "Hello, World!"'," ","my_string = my_string.swapcase() # Saves the result of swapcase()","print(my_string)"]})]})}let sn="text",si="typeFunction",sr="returnType",so="argument";function sa(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=eg(t,sn),o=(0,n.jsx)(G,{code:eg(t,si)+"()"}),a=eg(t,sr),l=(0,n.jsx)(G,{code:eg(t,so)});return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:[o," won't change ",l]}),(0,n.jsxs)("p",{children:["The code on line ",s," calls ",o," on ",l,":"]}),(0,n.jsx)(z,{code:i}),(0,n.jsxs)("p",{children:["Type conversion functions like ",o," do not change the data type of the argument. They return a new value instead. This means the code above will not change ",l,"."]}),(0,n.jsxs)("p",{children:["Save the new ",a," created by ",o," to a variable. You can create a new variable or reuse ",l,"."]}),(0,n.jsx)(z,{code:['test = "123"',"","int(test) # This code does not change test","new_var = int(test) # Creates a new integer variable with the value 123","test = int(test) # Changes test to an integer, 123"]}),(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:[(0,n.jsx)(G,{code:"float()"})," converts the value of an argument to a float. In the code below, the function has no effect because it is not saved to a variable:"]}),(0,n.jsx)(ej,{startingCode:['price = "12.99"'," ","float(price) # This code has no effect",'print("price is a", type(price)) # Prints the data type of price']}),(0,n.jsxs)("p",{children:["Assigning the result of ",(0,n.jsx)(G,{code:"float()"})," to ",(0,n.jsx)(G,{code:"price"})," fixes the issue:"]}),(0,n.jsx)(ej,{startingCode:['price = "12.99"'," ","price = float(price) # Saves the result of float()",'print("price is a", type(price)) # Prints the data type of price']})]})}function sl(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i="allBranchesOfExhaustiveConditional";eg(t,"text");let o=(0,n.jsx)(G,{code:eg(t,"loopType")});eg(t,"returnCount");let a=eg(t,"exitLevel")===i,l=()=>a?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The code in the ",o," loop beginning on line ",s," will only run once. This is because the loop contains an ",(0,n.jsx)(G,{code:"if..."})," block that has a ",(0,n.jsx)(G,{code:"return"})," in every branch. The ",(0,n.jsx)(G,{code:"if..."})," block has a branch for all possible conditions, so Python will always reach a ",(0,n.jsx)(G,{code:"return"})," the first time the loop runs."]}),(0,n.jsxs)("p",{children:["To fix this, you might be able to remove the ",(0,n.jsx)(G,{code:"else"})," branch and replace it with a ",(0,n.jsx)(G,{code:"return"})," outside the loop."]}),(0,n.jsx)("p",{children:"Here is an example:"}),(0,n.jsx)(z,{code:["def contains_a(name):","	 # Incorrect","	for letter in name:",'		if letter == "a" or letter == "A":',"			return True","		else:","			return False","","def contains_b(name):","	 # Correct","	for letter in name:",'		if letter == "b" or letter == "B":',"			return True","	return False"]})]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"return"})," on line ",s," causes a ",o," to only run once. This is because Python will always reach the ",(0,n.jsx)(G,{code:"return"})," the first time the loop runs."]}),(0,n.jsxs)("p",{children:["How to fix this depends on what you are trying to do. If the function should not ",(0,n.jsx)(G,{code:"return"})," until after the loop has finished, move ",(0,n.jsx)(G,{code:"return"})," outside the loop."]}),(0,n.jsx)("p",{children:"Here is an example:"}),(0,n.jsx)(z,{code:["def contains_a(name):","	 # Incorrect","	for letter in name:",'		if letter == "a" or letter == "A":',"			return True","		return False # This line will always run","","def contains_b(name):","	 # Correct","	for letter in name:",'		if letter == "b" or letter == "B":',"			return True","	return False"]})]});return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h1",{children:"Return statements cause a loop to end"}),l(),(0,n.jsx)("h2",{children:"An example"}),(0,n.jsxs)("p",{children:["Run the code below. The output shows that only the first item in the list passed to ",(0,n.jsx)(G,{code:"under_ten()"})," is checked:"]}),(0,n.jsx)(ej,{startingCode:["def under_ten(ages):","	 # Incorrect","	for age in ages:",'		print("Checking age:", age)',"		if age < 10:","			return True","		else:","			return False","","result = under_ten([18, 9, 12, 11])",'print("An age less than 10 was found:", result)']}),(0,n.jsxs)("p",{children:["The ",(0,n.jsx)(G,{code:"return"})," on line 9 causes the function to end before it checks all values in the list. To fix this, we can move the second ",(0,n.jsx)(G,{code:"return"})," outside the ",(0,n.jsx)(G,{code:"for"})," loop:"]}),(0,n.jsx)(ej,{startingCode:["def under_ten(ages):","	 # Incorrect","	for age in ages:",'		print("Checking age:", age)',"		if age < 10:","			return True","	return False","","result = under_ten([18, 9, 12, 11])",'print("An age less than 10 was found:", result)']}),(0,n.jsx)("p",{children:"Now the loop can continue until it finds a number under 10 or it has checked all numbers."})]})}function sc(e){let{misconInfo:t}=e,s=t.has(r)?Number(t.get(r)):-1,i=(0,n.jsx)(G,{code:ef("loopVarName","",t)}),o=ef("definitionText","",t),a=ef("modificationText","",t);ef("loopVarTypeAtDefinition","",t);let l=o.search(/range[ ]*\(/)>=0||o.search(/enumerate[ ]*\(/)>=0,c=()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Try it out"}),(0,n.jsxs)("p",{children:["Python will automatically increase ",(0,n.jsx)(G,{code:"i"})," in this loop so the code on line 5 is not needed:"]}),(0,n.jsx)(ej,{startingCode:["total = 0","","for i in range(10):","	total += i","	i += 1 # This is unnecessary","","print(total)"]}),(0,n.jsx)("p",{children:"Here is an improved version without the extra line of code:"}),(0,n.jsx)(ej,{startingCode:["total = 0","","for i in range(10):","	total += i","","print(total)"]}),(0,n.jsx)("p",{children:"If you run both examples, you will see the output is the same."})]}),h=()=>(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Example - Changing all the items in a list"}),(0,n.jsxs)("p",{children:["The purpose of the code below is to multiply each number in ",(0,n.jsx)(G,{code:"my_list"})," by 2. ",(0,n.jsx)(G,{code:"num"})," is the ",(0,n.jsx)(G,{code:"for"})," loop variable. Python will automatically give ",(0,n.jsx)(G,{code:"num"})," the value of an item in the list."]}),(0,n.jsx)(ej,{startingCode:["my_list = [1, 2, 3]","","# Double each number in my_list","for num in my_list: # gets each item in the list","	num = num * 2 # This will not work","","print(my_list) # Should print [2, 4, 6]"]}),(0,n.jsxs)("p",{children:["If you ran the code above, you will see that the output is wrong. The loop does not change ",(0,n.jsx)(G,{code:"my_list"}),". This is because ",(0,n.jsx)(G,{code:"num"})," is not an actual item in the list. It just has the same value. Changing ",(0,n.jsx)(G,{code:"num"})," on line 5 has no effect on the list."]}),(0,n.jsxs)("p",{children:["To change the item in the list, we need to use the right syntax to assign it a new value. We need to change the ",(0,n.jsx)(G,{code:"for"})," loop to count the ",(0,n.jsx)("em",{children:"index"})," of each item in the list:"]}),(0,n.jsx)(ej,{startingCode:["my_list = [1, 2, 3]","","# Double each number in my_list","for i in range(len(my_list)): # gets each index in the list","	my_list[i] = my_list[i] * 2 # This will work","","print(my_list) # Should print [2, 4, 6]"]})]});return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("h1",{children:["Avoid changing the value of a ",(0,n.jsx)(G,{code:"for"})," loop variable"]}),(0,n.jsxs)("p",{children:['The "loop variable" in this ',(0,n.jsx)(G,{code:"for"})," loop is ",i,":"]}),(0,n.jsx)(z,{code:o}),(0,n.jsxs)("p",{children:["On line ",s,", ",i," is given a new value:"]}),(0,n.jsx)(z,{code:a}),(0,n.jsxs)("p",{children:["This change has no effect because the ",(0,n.jsx)(G,{code:"for"})," loop automatically sets the next value of ",i," at the start of the next iteration."]}),l?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["If you wanted to change ",i," to move the ",(0,n.jsx)(G,{code:"for"})," loop to the next step, you can remove line ",s,". Python will handle this for you."]}),(0,n.jsx)("p",{children:"Here is an example:"}),(0,n.jsx)(z,{code:["for i in range(5):","	print(i)","	i += 1 # This line is unnecessary","","# Better","for i in range(5):","	print(i)"]}),c()]}):(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["How to fix this issue depends on what you are trying to do. You may be able to delete line ",s," or you may need to try something different."]}),h()]})]})}var sh=s(6463);function sd(){let e=(0,sh.useSearchParams)();switch(e.get(i)){case o:return(0,n.jsx)(tV,{misconInfo:e});case a:return(0,n.jsx)(tU,{misconInfo:e});case l:return(0,n.jsx)(eN,{misconInfo:e});case c:return(0,n.jsx)(t9,{misconInfo:e});case _:return(0,n.jsx)(eP,{misconInfo:e});case d:case p:return(0,n.jsx)(t$,{misconInfo:e});case h:return(0,n.jsx)(eB,{misconInfo:e});case u:case b:return(0,n.jsx)(eM,{misconInfo:e});case x:return(0,n.jsx)(t6,{misconInfo:e});case j:return(0,n.jsx)(eO,{misconInfo:e});case g:return(0,n.jsx)(sc,{misconInfo:e});case f:return(0,n.jsx)(eQ,{misconInfo:e});case m:return(0,n.jsx)(t5,{misconInfo:e});case y:return(0,n.jsx)(eX,{misconInfo:e});case w:return(0,n.jsx)(tN,{misconInfo:e});case T:return(0,n.jsx)(sl,{misconInfo:e});case F:return(0,n.jsx)(ss,{misconInfo:e});case C:return(0,n.jsx)(sa,{misconInfo:e});case I:return(0,n.jsx)(tB,{misconInfo:e});case N:return(0,n.jsx)(tL,{misconInfo:e});case v:return(0,n.jsx)(tq,{misconInfo:e});case k:return(0,n.jsx)(tK,{misconInfo:e});default:return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("p",{children:"Nothing here... Here's an editor to play with:"}),(0,n.jsx)(ej,{startingCode:"print('Hello, World')"})]})}}var su=s(9671),sx=s.n(su);function sp(){return(0,n.jsx)("main",{className:sx().main,children:(0,n.jsx)(Z.Suspense,{children:(0,n.jsx)(sd,{})})})}},551:function(e,t,s){"use strict";var n=s(7437),i=s(2265),r=s(7482),o=s.n(r);let a=e=>{let{prompt:t,submitHandler:s}=e,[r,a]=(0,i.useState)(""),[l,c]=(0,i.useState)(!0),h=e=>{13===e.keyCode&&(s(r),c(!1))},d=e=>{a(e.target.value)};return l?(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("label",{htmlFor:"userIn",children:t}),(0,n.jsx)("input",{id:"userIn",className:o().userInput,type:"text",onKeyDown:h,onChange:d,value:r,autoFocus:!0})]}):(0,n.jsxs)("span",{className:o().savedInput,children:[t,r]})};t.Z=a},6933:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(7437),_codeOutput_module_css__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(7693),_codeOutput_module_css__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_codeOutput_module_css__WEBPACK_IMPORTED_MODULE_1__),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2265),_codeOutput__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(1670),skulpt__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(5053),skulpt__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(skulpt__WEBPACK_IMPORTED_MODULE_4__),_rawInput__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(551);let MODE={PRIMARY:0,SECONDARY:1},PROMPT={PRIMARY:">>> ",SECONDARY:"... "},Repl=()=>{let modeRef=(0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)([MODE.PRIMARY]),commandRef=(0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(""),isTrigger=e=>":"===e||"/"===e,updateMode=e=>{let t=modeRef.current[0],s=e.length>0&&isTrigger(e[e.length-1]);t===MODE.PRIMARY?s&&modeRef.current.unshift(MODE.SECONDARY):t===MODE.SECONDARY&&0===e.length&&modeRef.current.shift()},newPrompt=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_rawInput__WEBPACK_IMPORTED_MODULE_5__.Z,{prompt:modeRef.current[0]===MODE.PRIMARY?PROMPT.PRIMARY:PROMPT.SECONDARY,submitHandler:e=>commandEntered(e)},"start"),commandEntered=e=>{updateMode(e);let t=modeRef.current[0];e.length>0&&(t===MODE.SECONDARY?commandRef.current="".concat(commandRef.current.length>0?commandRef.current+"\n":"").concat(e):commandRef.current=e),t===MODE.PRIMARY?runInteractive(commandRef.current):addOutput([newPrompt(PROMPT.SECONDARY)])},[out,setOut]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([newPrompt(PROMPT.PRIMARY)]),addOutput=e=>{setOut(t=>[...t,...e])},skulptOutput=e=>{setOut(t=>[...t,e])},runInteractive=userIn=>{let $compiledmod;let isSingleCommand=1===userIn.split("\n").length;if(skulpt__WEBPACK_IMPORTED_MODULE_4___default().configure({output:skulptOutput,__future__:skulpt__WEBPACK_IMPORTED_MODULE_4___default().python3,inputfunTakesPrompt:!0}),userIn.length>0){let outputResult=!0;userIn.match(/\s*import/)?outputResult=!1:isSingleCommand&&(userIn="__result = "+userIn);let optMessages=[];try{let r=eval(skulpt__WEBPACK_IMPORTED_MODULE_4___default().compile(userIn,"repl","exec",!0).code)(skulpt__WEBPACK_IMPORTED_MODULE_4___default().globals);r.__result&&outputResult&&null!==r.__result.v&&isSingleCommand&&optMessages.push(skulpt__WEBPACK_IMPORTED_MODULE_4___default().ffi.remapToJs(skulpt__WEBPACK_IMPORTED_MODULE_4___default().builtin.repr(r.__result)))}catch(evalError){optMessages.push(evalError.toString())}commandRef.current="",optMessages.push(newPrompt()),addOutput(optMessages)}};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{className:_codeOutput_module_css__WEBPACK_IMPORTED_MODULE_1___default().repl,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_codeOutput__WEBPACK_IMPORTED_MODULE_3__.Z,{text:out,prefix:""})})};__webpack_exports__.Z=Repl},845:function(e){e.exports={codeEditor:"codeEditor_codeEditor__Y5X0l",buttons:"codeEditor_buttons__MNuVY",runButton:"codeEditor_runButton___aNoV"}},7693:function(e){e.exports={output:"codeOutput_output__wmW7F",repl:"codeOutput_repl__18oEz"}},6682:function(e){e.exports={miniIDE:"miniIDE_miniIDE__nEW2x"}},9671:function(e){e.exports={main:"page_main__GlU4n",code:"page_code__9lUUd"}},7482:function(e){e.exports={userInput:"rawInput_userInput__VMv1S",savedInput:"rawInput_savedInput__uZ2hb"}}},function(e){var t=function(t){return e(e.s=t)};e.O(0,[97,401,986,361,260,971,23,744],function(){return t(4926)}),_N_E=e.O()}]);